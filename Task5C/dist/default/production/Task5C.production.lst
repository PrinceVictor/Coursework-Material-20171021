

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Nov 14 20:48:56 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.44
    15                           ; Generated 14/09/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0009                     _PORTE	set	9
   127  0007                     _PORTC	set	7
   128  0005                     _PORTA	set	5
   129  0008                     _PORTD	set	8
   130  0006                     _PORTB	set	6
   131  001E                     _ADRESH	set	30
   132  001F                     _ADCON0	set	31
   133  009F                     _ADCON1	set	159
   134  0081                     _OPTION_REG	set	129
   135  0089                     _TRISE	set	137
   136  0088                     _TRISD	set	136
   137  0087                     _TRISC	set	135
   138  0086                     _TRISB	set	134
   139  0085                     _TRISA	set	133
   140  0188                     _ANSEL	set	392
   141  0189                     _ANSELH	set	393
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  07FC                     start_initialization:	
   147  07FC                     __initialization:	
   148  07FC                     end_of_initialization:	
   149                           ;End of C runtime variable initialization code
   150                           
   151  07FC                     __end_of__initialization:	
   152  07FC  0183               	clrf	3
   153  07FD  120A  118A  2F60   	ljmp	_main	;jump to C main() function
   154                           
   155                           	psect	cstackCOMMON
   156  0070                     __pcstackCOMMON:	
   157  0070                     ?_ReadADC:	
   158  0070                     ??_ReadADC:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0070                     ?_ReadSw:	
   162                           ; 1 bytes @ 0x0
   163                           
   164  0070                     ??_ReadSw:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0070                     ?_Select4:	
   168                           ; 1 bytes @ 0x0
   169                           
   170  0070                     ?_button_released:	
   171                           ; 1 bytes @ 0x0
   172                           
   173  0070                     ??_button_released:	
   174                           ; 1 bytes @ 0x0
   175                           
   176  0070                     ?_main:	
   177                           ; 1 bytes @ 0x0
   178                           
   179                           
   180                           ; 2 bytes @ 0x0
   181  0070                     	ds	2
   182  0072                     ReadSw@tmp:	
   183                           
   184                           ; 1 bytes @ 0x2
   185  0072                     	ds	1
   186  0073                     ??_Select4:	
   187                           
   188                           ; 1 bytes @ 0x3
   189  0073                     	ds	3
   190  0076                     Select4@tmp:	
   191                           
   192                           ; 1 bytes @ 0x6
   193  0076                     	ds	1
   194  0077                     Select4@oldLEDs:	
   195                           
   196                           ; 1 bytes @ 0x7
   197  0077                     	ds	1
   198  0078                     Select4@result:	
   199                           
   200                           ; 1 bytes @ 0x8
   201  0078                     	ds	1
   202  0079                     ??_main:	
   203                           
   204                           ; 1 bytes @ 0x9
   205  0079                     	ds	3
   206                           
   207                           	psect	cstackBANK0
   208  0020                     __pcstackBANK0:	
   209  0020                     main@Temp:	
   210                           
   211                           ; 1 bytes @ 0x0
   212  0020                     	ds	1
   213  0021                     main@X:	
   214                           
   215                           ; 1 bytes @ 0x1
   216  0021                     	ds	1
   217  0022                     main@i:	
   218                           
   219                           ; 2 bytes @ 0x2
   220  0022                     	ds	2
   221                           
   222                           	psect	maintext
   223  0760                     __pmaintext:	
   224 ;;
   225 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   226 ;;
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 8 in file "main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;  i               2    2[BANK0 ] int 
   234 ;;  X               1    1[BANK0 ] unsigned char 
   235 ;;  Temp            1    0[BANK0 ] unsigned char 
   236 ;; Return value:  Size  Location     Type
   237 ;;                  2   68[None  ] int 
   238 ;; Registers used:
   239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : B00/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   245 ;;      Params:         0       0       0       0       0
   246 ;;      Locals:         0       4       0       0       0
   247 ;;      Temps:          3       0       0       0       0
   248 ;;      Totals:         3       4       0       0       0
   249 ;;Total ram usage:        7 bytes
   250 ;; Hardware stack levels required when called:    2
   251 ;; This function calls:
   252 ;;		_Select4
   253 ;;		_button_released
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           
   260                           ;psect for function _main
   261  0760                     _main:	
   262                           
   263                           ;incstack = 0
   264                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   265  0760  1283               	bcf	3,5	;RP0=0, select bank0
   266  0761  1303               	bcf	3,6	;RP1=0, select bank0
   267  0762  0185               	clrf	5	;volatile
   268  0763  0186               	clrf	6	;volatile
   269  0764  0187               	clrf	7	;volatile
   270  0765  0188               	clrf	8	;volatile
   271  0766  0189               	clrf	9	;volatile
   272  0767  1683               	bsf	3,5	;RP0=1, select bank3
   273  0768  1703               	bsf	3,6	;RP1=1, select bank3
   274  0769  0189               	clrf	9	;volatile
   275  076A  3001               	movlw	1
   276  076B  0088               	movwf	8	;volatile
   277                           
   278                           ;main.c: 9: unsigned char Temp, X;
   279                           ;init.c: 4: PORTA=0; PORTB=0; PORTC=0; PORTD=0; PORTE=0;
   280                           ;init.c: 7: ANSELH= 0;
   281                           ;init.c: 8: ANSEL = 0b00000001;
   282                           ;init.c: 9: TRISA = 0b00000001;
   283  076C  3001               	movlw	1
   284  076D  1683               	bsf	3,5	;RP0=1, select bank1
   285  076E  1303               	bcf	3,6	;RP1=0, select bank1
   286  076F  0085               	movwf	5	;volatile
   287                           
   288                           ;init.c: 12: TRISB = 0b00000001;
   289  0770  3001               	movlw	1
   290  0771  0086               	movwf	6	;volatile
   291                           
   292                           ;init.c: 15: TRISC=0; TRISD=0; TRISE=0b11111000;
   293  0772  0187               	clrf	7	;volatile
   294  0773  0188               	clrf	8	;volatile
   295  0774  30F8               	movlw	248
   296  0775  0089               	movwf	9	;volatile
   297                           
   298                           ;init.c: 18: OPTION_REG = 0b00001000;
   299  0776  3008               	movlw	8
   300  0777  0081               	movwf	1	;volatile
   301                           
   302                           ;init.c: 21: ADCON1 = 0;
   303  0778  019F               	clrf	31	;volatile
   304                           
   305                           ;init.c: 22: ADCON0 = 0b01000001;
   306  0779  3041               	movlw	65
   307  077A  1283               	bcf	3,5	;RP0=0, select bank0
   308  077B  1303               	bcf	3,6	;RP1=0, select bank0
   309  077C  009F               	movwf	31	;volatile
   310                           
   311                           ;init.c: 25: PORTD = 0xFF;
   312  077D  30FF               	movlw	255
   313  077E  0088               	movwf	8	;volatile
   314                           
   315                           ;init.c: 26: _delay((unsigned long)((300)*(4000000/4000.0)));
   316  077F  3002               	movlw	2
   317  0780  00FB               	movwf	??_main+2
   318  0781  3086               	movlw	134
   319  0782  00FA               	movwf	??_main+1
   320  0783  3099               	movlw	153
   321  0784  00F9               	movwf	??_main
   322  0785                     u197:	
   323  0785  0BF9               	decfsz	??_main,f
   324  0786  2F85               	goto	u197
   325  0787  0BFA               	decfsz	??_main+1,f
   326  0788  2F85               	goto	u197
   327  0789  0BFB               	decfsz	??_main+2,f
   328  078A  2F85               	goto	u197
   329                           
   330                           ;init.c: 27: PORTD = 0;
   331  078B  1283               	bcf	3,5	;RP0=0, select bank0
   332  078C  1303               	bcf	3,6	;RP1=0, select bank0
   333  078D  0188               	clrf	8	;volatile
   334                           
   335                           ;init.c: 28: _delay((unsigned long)((300)*(4000000/4000.0)));
   336  078E  3002               	movlw	2
   337  078F  00FB               	movwf	??_main+2
   338  0790  3086               	movlw	134
   339  0791  00FA               	movwf	??_main+1
   340  0792  3099               	movlw	153
   341  0793  00F9               	movwf	??_main
   342  0794                     u207:	
   343  0794  0BF9               	decfsz	??_main,f
   344  0795  2F94               	goto	u207
   345  0796  0BFA               	decfsz	??_main+1,f
   346  0797  2F94               	goto	u207
   347  0798  0BFB               	decfsz	??_main+2,f
   348  0799  2F94               	goto	u207
   349  079A                     l763:	
   350                           ;main.c: 13: while (1) {
   351                           
   352                           
   353                           ;main.c: 15: if ( button_released() ) {
   354  079A  120A  118A  26C8  120A  118A  	fcall	_button_released
   355  079F  3A00               	xorlw	0
   356  07A0  1903               	skipnz
   357  07A1  2FC7               	goto	l791
   358                           
   359                           ;main.c: 16: Temp = Select4();
   360  07A2  120A  118A  26ED  120A  118A  	fcall	_Select4
   361  07A7  00F9               	movwf	??_main
   362  07A8  0879               	movf	??_main,w
   363  07A9  1283               	bcf	3,5	;RP0=0, select bank0
   364  07AA  1303               	bcf	3,6	;RP1=0, select bank0
   365  07AB  00A0               	movwf	main@Temp
   366                           
   367                           ;main.c: 18: switch(Temp){
   368  07AC  2FB9               	goto	l775
   369  07AD                     l72:	
   370                           ;main.c: 19: case 1: X = 1; break;
   371                           
   372  07AD  01A1               	clrf	main@X
   373  07AE  0AA1               	incf	main@X,f
   374  07AF  2FC7               	goto	l791
   375  07B0                     l767:	
   376                           ;main.c: 20: case 2: X = 5; break;
   377                           
   378  07B0  3005               	movlw	5
   379  07B1  2FB5               	goto	L2
   380  07B2                     l769:	
   381                           ;main.c: 21: case 4: X = 9; break;
   382                           
   383  07B2  3009               	movlw	9
   384  07B3  2FB5               	goto	L2
   385  07B4                     l771:	
   386                           ;main.c: 22: case 8: X = 12; break;
   387                           
   388  07B4  300C               	movlw	12
   389  07B5                     L2:	
   390  07B5  00F9               	movwf	??_main
   391  07B6  0879               	movf	??_main,w
   392  07B7  00A1               	movwf	main@X
   393                           
   394                           ;main.c: 23: }
   395  07B8  2FC7               	goto	l791
   396  07B9                     l775:	
   397  07B9  0820               	movf	main@Temp,w
   398                           
   399                           ; Switch size 1, requested type "space"
   400                           ; Number of cases is 4, Range of values is 1 to 8
   401                           ; switch strategies available:
   402                           ; Name         Instructions Cycles
   403                           ; simple_byte           13     7 (average)
   404                           ; direct_byte           35    11 (fixed)
   405                           ; jumptable            263     9 (fixed)
   406                           ;	Chosen strategy is simple_byte
   407  07BA  3A01               	xorlw	1	; case 1
   408  07BB  1903               	skipnz
   409  07BC  2FAD               	goto	l72
   410  07BD  3A03               	xorlw	3	; case 2
   411  07BE  1903               	skipnz
   412  07BF  2FB0               	goto	l767
   413  07C0  3A06               	xorlw	6	; case 4
   414  07C1  1903               	skipnz
   415  07C2  2FB2               	goto	l769
   416  07C3  3A0C               	xorlw	12	; case 8
   417  07C4  1903               	skipnz
   418  07C5  2FB4               	goto	l771
   419  07C6  2FC7               	goto	l791
   420  07C7                     l791:	
   421                           ;main.c: 25: }
   422                           ;main.c: 28: while(!button_released()){
   423                           
   424  07C7  120A  118A  26C8  120A  118A  	fcall	_button_released
   425  07CC  3A00               	xorlw	0
   426  07CD  1D03               	btfss	3,2
   427  07CE  2F9A               	goto	l763
   428                           
   429                           ;main.c: 29: PORTD = 0b00000010;
   430  07CF  3002               	movlw	2
   431  07D0  1283               	bcf	3,5	;RP0=0, select bank0
   432  07D1  1303               	bcf	3,6	;RP1=0, select bank0
   433  07D2  0088               	movwf	8	;volatile
   434                           
   435                           ;main.c: 30: for(int i = 28; i> 0; i--){
   436  07D3  301C               	movlw	28
   437  07D4  00A2               	movwf	main@i
   438  07D5  3000               	movlw	0
   439  07D6  00A3               	movwf	main@i+1
   440  07D7                     L3:	
   441  07D7  0823               	movf	main@i+1,w
   442  07D8  3A80               	xorlw	128
   443  07D9  00FF               	movwf	127
   444  07DA  3080               	movlw	128
   445  07DB  027F               	subwf	127,w
   446  07DC  1D03               	skipz
   447  07DD  2FE0               	goto	u155
   448  07DE  3001               	movlw	1
   449  07DF  0222               	subwf	main@i,w
   450  07E0                     u155:	
   451  07E0  1C03               	btfss	3,0
   452  07E1  2FC7               	goto	l791
   453                           
   454                           ;main.c: 31: if(X == i){
   455  07E2  1283               	bcf	3,5	;RP0=0, select bank0
   456  07E3  1303               	bcf	3,6	;RP1=0, select bank0
   457  07E4  0821               	movf	main@X,w
   458  07E5  00F9               	movwf	??_main
   459  07E6  01FA               	clrf	??_main+1
   460  07E7  0823               	movf	main@i+1,w
   461  07E8  067A               	xorwf	??_main+1,w
   462  07E9  1D03               	skipz
   463  07EA  2FED               	goto	u165
   464  07EB  0822               	movf	main@i,w
   465  07EC  0679               	xorwf	??_main,w
   466  07ED                     u165:	
   467  07ED  1903               	btfsc	3,2
   468                           
   469                           ;main.c: 32: PORTD |= 0b00000001;
   470  07EE  1408               	bsf	8,0	;volatile
   471                           
   472                           ;main.c: 33: }
   473                           ;main.c: 34: _delay((unsigned long)((100)*(4000000/4000000.0)));
   474  07EF  3021               	movlw	33
   475  07F0  00F9               	movwf	??_main
   476  07F1                     u217:	
   477  07F1  0BF9               	decfsz	??_main,f
   478  07F2  2FF1               	goto	u217
   479  07F3  30FF               	movlw	255
   480  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   481  07F5  1303               	bcf	3,6	;RP1=0, select bank0
   482  07F6  07A2               	addwf	main@i,f
   483  07F7  1803               	skipnc
   484  07F8  0AA3               	incf	main@i+1,f
   485  07F9  30FF               	movlw	255
   486  07FA  07A3               	addwf	main@i+1,f
   487  07FB  2FD7               	goto	L3
   488  07FC                     __end_of_main:	
   489                           
   490                           	psect	text1
   491  06C8                     __ptext1:	
   492 ;; *************** function _button_released *****************
   493 ;; Defined at:
   494 ;;		line 4 in file "main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      unsigned char 
   501 ;; Registers used:
   502 ;;		wreg, status,2
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   508 ;;      Params:         0       0       0       0       0
   509 ;;      Locals:         0       0       0       0       0
   510 ;;      Temps:          0       0       0       0       0
   511 ;;      Totals:         0       0       0       0       0
   512 ;;Total ram usage:        0 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_main
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           
   522                           ;psect for function _button_released
   523  06C8                     _button_released:	
   524                           
   525                           ;main.c: 5: return PORTB & 0b00000001;
   526                           
   527                           ;incstack = 0
   528                           ; Regs used in _button_released: [wreg+status,2]
   529  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   530  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   531  06CA  0806               	movf	6,w	;volatile
   532  06CB  3901               	andlw	1
   533  06CC  0008               	return
   534  06CD                     __end_of_button_released:	
   535                           
   536                           	psect	text2
   537  06ED                     __ptext2:	
   538 ;; *************** function _Select4 *****************
   539 ;; Defined at:
   540 ;;		line 50 in file "prologue.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;		None
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  result          1    8[COMMON] unsigned char 
   545 ;;  oldLEDs         1    7[COMMON] unsigned char 
   546 ;;  tmp             1    6[COMMON] unsigned char 
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      unsigned char 
   549 ;; Registers used:
   550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   556 ;;      Params:         0       0       0       0       0
   557 ;;      Locals:         3       0       0       0       0
   558 ;;      Temps:          3       0       0       0       0
   559 ;;      Totals:         6       0       0       0       0
   560 ;;Total ram usage:        6 bytes
   561 ;; Hardware stack levels used:    1
   562 ;; Hardware stack levels required when called:    1
   563 ;; This function calls:
   564 ;;		_ReadADC
   565 ;;		_ReadSw
   566 ;; This function is called by:
   567 ;;		_main
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           
   572                           ;psect for function _Select4
   573  06ED                     _Select4:	
   574                           
   575                           ;prologue.c: 51: unsigned char tmp, oldLEDs, result;
   576                           ;prologue.c: 52: oldLEDs=PORTD;
   577                           
   578                           ;incstack = 0
   579                           ; Regs used in _Select4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   580  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   581  06EE  1303               	bcf	3,6	;RP1=0, select bank0
   582  06EF  0808               	movf	8,w	;volatile
   583  06F0  00F3               	movwf	??_Select4
   584  06F1  0873               	movf	??_Select4,w
   585  06F2  00F7               	movwf	Select4@oldLEDs
   586                           
   587                           ;prologue.c: 53: PORTD=0b00010000;
   588  06F3  3010               	movlw	16
   589  06F4  0088               	movwf	8	;volatile
   590  06F5                     l687:	
   591                           ;prologue.c: 55: do {
   592                           
   593                           
   594                           ;prologue.c: 56: tmp = ReadADC();
   595  06F5  120A  118A  26CD  120A  118A  	fcall	_ReadADC
   596  06FA  00F3               	movwf	??_Select4
   597  06FB  0873               	movf	??_Select4,w
   598  06FC  00F6               	movwf	Select4@tmp
   599                           
   600                           ;prologue.c: 57: tmp >>= 6;
   601  06FD  0EF6               	swapf	Select4@tmp,f
   602  06FE  0CF6               	rrf	Select4@tmp,f
   603  06FF  0CF6               	rrf	Select4@tmp,f
   604  0700  3003               	movlw	3
   605  0701  05F6               	andwf	Select4@tmp,f
   606                           
   607                           ;prologue.c: 58: switch (tmp) {
   608  0702  2F0F               	goto	l697
   609  0703                     l50:	
   610                           ;prologue.c: 59: case 0: result=1; break;
   611                           
   612  0703  01F8               	clrf	Select4@result
   613  0704  0AF8               	incf	Select4@result,f
   614  0705  2F1D               	goto	l699
   615  0706                     l691:	
   616                           ;prologue.c: 60: case 1: result=2; break;
   617                           
   618  0706  3002               	movlw	2
   619  0707  2F0B               	goto	L5
   620  0708                     l693:	
   621                           ;prologue.c: 61: case 2: result=4; break;
   622                           
   623  0708  3004               	movlw	4
   624  0709  2F0B               	goto	L5
   625  070A                     l695:	
   626                           ;prologue.c: 62: case 3: result=8;
   627                           
   628  070A  3008               	movlw	8
   629  070B                     L5:	
   630  070B  00F3               	movwf	??_Select4
   631  070C  0873               	movf	??_Select4,w
   632  070D  00F8               	movwf	Select4@result
   633                           
   634                           ;prologue.c: 63: }
   635  070E  2F1D               	goto	l699
   636  070F                     l697:	
   637  070F  0876               	movf	Select4@tmp,w
   638                           
   639                           ; Switch size 1, requested type "space"
   640                           ; Number of cases is 4, Range of values is 0 to 3
   641                           ; switch strategies available:
   642                           ; Name         Instructions Cycles
   643                           ; simple_byte           13     7 (average)
   644                           ; direct_byte           20     8 (fixed)
   645                           ; jumptable            260     6 (fixed)
   646                           ;	Chosen strategy is simple_byte
   647  0710  3A00               	xorlw	0	; case 0
   648  0711  1903               	skipnz
   649  0712  2F03               	goto	l50
   650  0713  3A01               	xorlw	1	; case 1
   651  0714  1903               	skipnz
   652  0715  2F06               	goto	l691
   653  0716  3A03               	xorlw	3	; case 2
   654  0717  1903               	skipnz
   655  0718  2F08               	goto	l693
   656  0719  3A01               	xorlw	1	; case 3
   657  071A  1903               	skipnz
   658  071B  2F0A               	goto	l695
   659  071C  2F1D               	goto	l699
   660  071D                     l699:	
   661                           
   662                           ;prologue.c: 64: PORTD = result | 0b00010000 | (oldLEDs & 0b11000000);
   663  071D  0877               	movf	Select4@oldLEDs,w
   664  071E  39C0               	andlw	192
   665  071F  0478               	iorwf	Select4@result,w
   666  0720  3810               	iorlw	16
   667  0721  1283               	bcf	3,5	;RP0=0, select bank0
   668  0722  1303               	bcf	3,6	;RP1=0, select bank0
   669  0723  0088               	movwf	8	;volatile
   670                           
   671                           ;prologue.c: 65: } while ( ReadSw() );
   672  0724  120A  118A  26D4  120A  118A  	fcall	_ReadSw
   673  0729  3A00               	xorlw	0
   674  072A  1D03               	skipz
   675  072B  2EF5               	goto	l687
   676                           
   677                           ;prologue.c: 67: PORTD=0; _delay((unsigned long)((300)*(4000000/4000.0)));
   678  072C  1283               	bcf	3,5	;RP0=0, select bank0
   679  072D  1303               	bcf	3,6	;RP1=0, select bank0
   680  072E  0188               	clrf	8	;volatile
   681  072F  3002               	movlw	2
   682  0730  00F5               	movwf	??_Select4+2
   683  0731  3086               	movlw	134
   684  0732  00F4               	movwf	??_Select4+1
   685  0733  3099               	movlw	153
   686  0734  00F3               	movwf	??_Select4
   687  0735                     u227:	
   688  0735  0BF3               	decfsz	??_Select4,f
   689  0736  2F35               	goto	u227
   690  0737  0BF4               	decfsz	??_Select4+1,f
   691  0738  2F35               	goto	u227
   692  0739  0BF5               	decfsz	??_Select4+2,f
   693  073A  2F35               	goto	u227
   694                           
   695                           ;prologue.c: 68: PORTD=result; _delay((unsigned long)((400)*(4000000/4000.0)));
   696  073B  0878               	movf	Select4@result,w
   697  073C  1283               	bcf	3,5	;RP0=0, select bank0
   698  073D  1303               	bcf	3,6	;RP1=0, select bank0
   699  073E  0088               	movwf	8	;volatile
   700  073F  3003               	movlw	3
   701  0740  00F5               	movwf	??_Select4+2
   702  0741  3008               	movlw	8
   703  0742  00F4               	movwf	??_Select4+1
   704  0743  3077               	movlw	119
   705  0744  00F3               	movwf	??_Select4
   706  0745                     u237:	
   707  0745  0BF3               	decfsz	??_Select4,f
   708  0746  2F45               	goto	u237
   709  0747  0BF4               	decfsz	??_Select4+1,f
   710  0748  2F45               	goto	u237
   711  0749  0BF5               	decfsz	??_Select4+2,f
   712  074A  2F45               	goto	u237
   713                           
   714                           ;prologue.c: 69: PORTD=0; _delay((unsigned long)((300)*(4000000/4000.0)));
   715  074B  1283               	bcf	3,5	;RP0=0, select bank0
   716  074C  1303               	bcf	3,6	;RP1=0, select bank0
   717  074D  0188               	clrf	8	;volatile
   718  074E  3002               	movlw	2
   719  074F  00F5               	movwf	??_Select4+2
   720  0750  3086               	movlw	134
   721  0751  00F4               	movwf	??_Select4+1
   722  0752  3099               	movlw	153
   723  0753  00F3               	movwf	??_Select4
   724  0754                     u247:	
   725  0754  0BF3               	decfsz	??_Select4,f
   726  0755  2F54               	goto	u247
   727  0756  0BF4               	decfsz	??_Select4+1,f
   728  0757  2F54               	goto	u247
   729  0758  0BF5               	decfsz	??_Select4+2,f
   730  0759  2F54               	goto	u247
   731                           
   732                           ;prologue.c: 71: PORTD=oldLEDs;
   733  075A  0877               	movf	Select4@oldLEDs,w
   734  075B  1283               	bcf	3,5	;RP0=0, select bank0
   735  075C  1303               	bcf	3,6	;RP1=0, select bank0
   736  075D  0088               	movwf	8	;volatile
   737                           
   738                           ;prologue.c: 72: return result;
   739  075E  0878               	movf	Select4@result,w
   740  075F  0008               	return
   741  0760                     __end_of_Select4:	
   742                           
   743                           	psect	text3
   744  06D4                     __ptext3:	
   745 ;; *************** function _ReadSw *****************
   746 ;; Defined at:
   747 ;;		line 41 in file "prologue.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;		None
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  tmp             1    2[COMMON] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      unsigned char 
   754 ;; Registers used:
   755 ;;		wreg, status,2
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   761 ;;      Params:         0       0       0       0       0
   762 ;;      Locals:         1       0       0       0       0
   763 ;;      Temps:          2       0       0       0       0
   764 ;;      Totals:         3       0       0       0       0
   765 ;;Total ram usage:        3 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; This function calls:
   768 ;;		Nothing
   769 ;; This function is called by:
   770 ;;		_Select4
   771 ;;		_SelectB
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _ReadSw
   777  06D4                     _ReadSw:	
   778  06D4                     l43:	
   779                           ;incstack = 0
   780                           ; Regs used in _ReadSw: [wreg+status,2]
   781                           ;prologue.c: 42: unsigned char tmp;
   782                           ;prologue.c: 43: do {
   783                           
   784                           
   785                           ;prologue.c: 44: tmp = PORTB & 0b00000001;
   786  06D4  1283               	bcf	3,5	;RP0=0, select bank0
   787  06D5  1303               	bcf	3,6	;RP1=0, select bank0
   788  06D6  0806               	movf	6,w	;volatile
   789  06D7  3901               	andlw	1
   790  06D8  00F0               	movwf	??_ReadSw
   791  06D9  0870               	movf	??_ReadSw,w
   792  06DA  00F2               	movwf	ReadSw@tmp
   793                           
   794                           ;prologue.c: 45: _delay((unsigned long)((20)*(4000000/4000.0)));
   795  06DB  301A               	movlw	26
   796  06DC  00F1               	movwf	??_ReadSw+1
   797  06DD  30F8               	movlw	248
   798  06DE  00F0               	movwf	??_ReadSw
   799  06DF                     u257:	
   800  06DF  0BF0               	decfsz	??_ReadSw,f
   801  06E0  2EDF               	goto	u257
   802  06E1  0BF1               	decfsz	??_ReadSw+1,f
   803  06E2  2EDF               	goto	u257
   804  06E3  0000               	nop
   805                           
   806                           ;prologue.c: 46: } while ( tmp != (PORTB & 0b00000001) );
   807  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   808  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   809  06E6  0806               	movf	6,w	;volatile
   810  06E7  3901               	andlw	1
   811  06E8  0672               	xorwf	ReadSw@tmp,w
   812  06E9  1D03               	skipz
   813  06EA  2ED4               	goto	l43
   814                           
   815                           ;prologue.c: 47: return tmp;
   816  06EB  0872               	movf	ReadSw@tmp,w
   817  06EC  0008               	return
   818  06ED                     __end_of_ReadSw:	
   819                           
   820                           	psect	text4
   821  06CD                     __ptext4:	
   822 ;; *************** function _ReadADC *****************
   823 ;; Defined at:
   824 ;;		line 34 in file "prologue.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;		None
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      unsigned char 
   831 ;; Registers used:
   832 ;;		wreg
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   838 ;;      Params:         0       0       0       0       0
   839 ;;      Locals:         0       0       0       0       0
   840 ;;      Temps:          0       0       0       0       0
   841 ;;      Totals:         0       0       0       0       0
   842 ;;Total ram usage:        0 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; This function calls:
   845 ;;		Nothing
   846 ;; This function is called by:
   847 ;;		_Select4
   848 ;;		_SelectB
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           
   853                           ;psect for function _ReadADC
   854  06CD                     _ReadADC:	
   855                           
   856                           ;prologue.c: 35: ADCON0 |= 0b00000010;
   857                           
   858                           ;incstack = 0
   859                           ; Regs used in _ReadADC: [wreg]
   860  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   861  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   862  06CF  149F               	bsf	31,1	;volatile
   863  06D0                     l37:	
   864                           ;prologue.c: 36: while ( (ADCON0 & 0b00000010) );
   865                           
   866  06D0  189F               	btfsc	31,1	;volatile
   867  06D1  2ED0               	goto	l37
   868                           
   869                           ;prologue.c: 37: return ADRESH;
   870  06D2  081E               	movf	30,w	;volatile
   871  06D3  0008               	return
   872  06D4                     __end_of_ReadADC:	
   873  007E                     btemp	set	126	;btemp
   874  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Select4
    _Select4->_ReadSw

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     301
                                              9 COMMON     3     3      0
                                              0 BANK0      4     4      0
                            _Select4
                    _button_released
 ---------------------------------------------------------------------------------
 (1) _button_released                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Select4                                              6     6      0     184
                                              3 COMMON     6     6      0
                            _ReadADC
                             _ReadSw
 ---------------------------------------------------------------------------------
 (2) _ReadSw                                               3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Select4
     _ReadADC
     _ReadSw
   _button_released

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Nov 14 20:48:56 2017

                      l50 0703                        l43 06D4                        l37 06D0  
                      l72 07AD                       l691 0706                       l771 07B4  
                     l763 079A                       l693 0708                       l695 070A  
                     l687 06F5                       l767 07B0                       l775 07B9  
                     l791 07C7                       l697 070F                       l769 07B2  
                     l699 071D                       u207 0794                       u217 07F1  
                     u227 0735                       u155 07E0                       u237 0745  
                     u165 07ED                       u247 0754                       u257 06DF  
                     u197 0785              __CFG_LVP$OFF 0000             __CFG_DEBUG$ON 0000  
                    _main 0760                      btemp 007E         ??_button_released 0070  
                    start 0000             __CFG_IESO$OFF 0000             Select4@result 0078  
         __end_of_ReadADC 06D4           __end_of_Select4 0760                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _PORTE 0009                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _TRISE 0089  
           __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000                     main@X 0021  
                   main@i 0022            __CFG_BOREN$OFF 0000                     status 0003  
                   wtemp0 007E            Select4@oldLEDs 0077                Select4@tmp 0076  
         __initialization 07FC              __end_of_main 07FC                    ??_main 0079  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ANSELH 0189                 ??_ReadADC 0070                    _ReadSw 06D4  
               ??_Select4 0073   __end_of__initialization 07FC            __pcstackCOMMON 0070  
         _button_released 06C8                   ?_ReadSw 0070                __pmaintext 0760  
                 _ReadADC 06CD                   _Select4 06ED           __size_of_ReadSw 0019  
 __end_of_button_released 06CD                   __ptext1 06C8                   __ptext2 06ED  
                 __ptext3 06D4                   __ptext4 06CD      end_of_initialization 07FC  
               ReadSw@tmp 0072            __end_of_ReadSw 06ED          ?_button_released 0070  
     start_initialization 07FC  __CFG_FOSC$INTRC_NOCLKOUT 0000                  ??_ReadSw 0070  
               ___latbits 0002             __pcstackBANK0 0020                  ?_ReadADC 0070  
                ?_Select4 0070          __size_of_ReadADC 0007          __size_of_Select4 0073  
       __CFG_BOR4V$BOR21V 0000             __size_of_main 009C                  main@Temp 0020  
__size_of_button_released 0005                _OPTION_REG 0081  
