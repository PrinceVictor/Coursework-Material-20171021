

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Nov 28 00:53:00 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.44
    18                           ; Generated 14/09/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  000B                     _INTCON	set	11
   130  0010                     _T1CON	set	16
   131  000E                     _TMR1L	set	14
   132  000F                     _TMR1H	set	15
   133  0009                     _PORTE	set	9
   134  0007                     _PORTC	set	7
   135  0005                     _PORTA	set	5
   136  0008                     _PORTD	set	8
   137  0006                     _PORTB	set	6
   138  001E                     _ADRESH	set	30
   139  001F                     _ADCON0	set	31
   140  0059                     _INTF	set	89
   141  0060                     _TMR1IF	set	96
   142  0066                     _ADIF	set	102
   143  00F9                     _GO	set	249
   144  008C                     _PIE1	set	140
   145  0081                     _OPTION_REGbits	set	129
   146  009F                     _ADCON1	set	159
   147  0081                     _OPTION_REG	set	129
   148  0089                     _TRISE	set	137
   149  0088                     _TRISD	set	136
   150  0087                     _TRISC	set	135
   151  0086                     _TRISB	set	134
   152  0085                     _TRISA	set	133
   153  0188                     _ANSEL	set	392
   154  0189                     _ANSELH	set	393
   155                           
   156                           ; #config settings
   157  0000                     
   158                           	psect	cinit
   159  0015                     start_initialization:	
   160  0015                     __initialization:	
   161                           
   162                           ; Clear objects allocated to BANK0
   163  0015  1283               	bcf	3,5	;RP0=0, select bank0
   164  0016  1303               	bcf	3,6	;RP1=0, select bank0
   165  0017  01AC               	clrf	__pbssBANK0& (0+127)
   166  0018  01AD               	clrf	(__pbssBANK0+1)& (0+127)
   167  0019  01AE               	clrf	(__pbssBANK0+2)& (0+127)
   168  001A                     end_of_initialization:	
   169                           ;End of C runtime variable initialization code
   170                           
   171  001A                     __end_of__initialization:	
   172  001A  0183               	clrf	3
   173  001B  120A  118A  281E   	ljmp	_main	;jump to C main() function
   174                           
   175                           	psect	bssBANK0
   176  002C                     __pbssBANK0:	
   177  002C                     _Counter:	
   178  002C                     	ds	3
   179                           
   180                           	psect	cstackCOMMON
   181  0070                     __pcstackCOMMON:	
   182  0070                     ?_Inter_Init:	
   183  0070                     ?_ReadADC:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_ReadSw:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_Select4:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_ISR:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ??_ISR:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_main:	
   199                           ; 1 bytes @ 0x0
   200                           
   201                           
   202                           ; 2 bytes @ 0x0
   203  0070                     	ds	5
   204  0075                     ??_Inter_Init:	
   205  0075                     ??_ReadADC:	
   206                           ; 1 bytes @ 0x5
   207                           
   208  0075                     ??_ReadSw:	
   209                           ; 1 bytes @ 0x5
   210                           
   211                           
   212                           ; 1 bytes @ 0x5
   213  0075                     	ds	2
   214  0077                     ReadSw@tmp:	
   215                           
   216                           ; 1 bytes @ 0x7
   217  0077                     	ds	1
   218                           
   219                           	psect	cstackBANK0
   220  0020                     __pcstackBANK0:	
   221  0020                     ??_Select4:	
   222                           
   223                           ; 1 bytes @ 0x0
   224  0020                     	ds	3
   225  0023                     Select4@tmp:	
   226                           
   227                           ; 1 bytes @ 0x3
   228  0023                     	ds	1
   229  0024                     Select4@oldLEDs:	
   230                           
   231                           ; 1 bytes @ 0x4
   232  0024                     	ds	1
   233  0025                     Select4@result:	
   234                           
   235                           ; 1 bytes @ 0x5
   236  0025                     	ds	1
   237  0026                     ??_main:	
   238                           
   239                           ; 1 bytes @ 0x6
   240  0026                     	ds	3
   241  0029                     main@i:	
   242                           
   243                           ; 2 bytes @ 0x9
   244  0029                     	ds	2
   245  002B                     main@temp:	
   246                           
   247                           ; 1 bytes @ 0xB
   248  002B                     	ds	1
   249                           
   250                           	psect	maintext
   251  001E                     __pmaintext:	
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 26 in file "main.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;  i               2    9[BANK0 ] unsigned int 
   262 ;;  temp            1   11[BANK0 ] unsigned char 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  2   97[None  ] int 
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : B00/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   272 ;;      Params:         0       0       0       0       0
   273 ;;      Locals:         0       3       0       0       0
   274 ;;      Temps:          0       3       0       0       0
   275 ;;      Totals:         0       6       0       0       0
   276 ;;Total ram usage:        6 bytes
   277 ;; Hardware stack levels required when called:    3
   278 ;; This function calls:
   279 ;;		_Inter_Init
   280 ;;		_ReadADC
   281 ;;		_Select4
   282 ;; This function is called by:
   283 ;;		Startup code after reset
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           
   288                           ;psect for function _main
   289  001E                     _main:	
   290                           
   291                           ;init.c: 4: PORTA=0; PORTB=0; PORTC=0; PORTD=0; PORTE=0;
   292                           
   293                           ;incstack = 0
   294                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   295  001E  1283               	bcf	3,5	;RP0=0, select bank0
   296  001F  1303               	bcf	3,6	;RP1=0, select bank0
   297  0020  0185               	clrf	5	;volatile
   298  0021  0186               	clrf	6	;volatile
   299  0022  0187               	clrf	7	;volatile
   300  0023  0188               	clrf	8	;volatile
   301  0024  0189               	clrf	9	;volatile
   302                           
   303                           ;init.c: 7: ANSELH= 0;
   304  0025  1683               	bsf	3,5	;RP0=1, select bank3
   305  0026  1703               	bsf	3,6	;RP1=1, select bank3
   306  0027  0189               	clrf	9	;volatile
   307                           
   308                           ;init.c: 8: ANSEL = 0b00000001;
   309  0028  3001               	movlw	1
   310  0029  0088               	movwf	8	;volatile
   311                           
   312                           ;init.c: 9: TRISA = 0b00000001;
   313  002A  3001               	movlw	1
   314  002B  1683               	bsf	3,5	;RP0=1, select bank1
   315  002C  1303               	bcf	3,6	;RP1=0, select bank1
   316  002D  0085               	movwf	5	;volatile
   317                           
   318                           ;init.c: 12: TRISB = 0b00000001;
   319  002E  3001               	movlw	1
   320  002F  0086               	movwf	6	;volatile
   321                           
   322                           ;init.c: 15: TRISC=0; TRISD=0; TRISE=0b11111000;
   323  0030  0187               	clrf	7	;volatile
   324  0031  0188               	clrf	8	;volatile
   325  0032  30F8               	movlw	248
   326  0033  0089               	movwf	9	;volatile
   327                           
   328                           ;init.c: 18: OPTION_REG = 0b00001000;
   329  0034  3008               	movlw	8
   330  0035  0081               	movwf	1	;volatile
   331                           
   332                           ;init.c: 21: ADCON1 = 0;
   333  0036  019F               	clrf	31	;volatile
   334                           
   335                           ;init.c: 22: ADCON0 = 0b01000001;
   336  0037  3041               	movlw	65
   337  0038  1283               	bcf	3,5	;RP0=0, select bank0
   338  0039  1303               	bcf	3,6	;RP1=0, select bank0
   339  003A  009F               	movwf	31	;volatile
   340                           
   341                           ;init.c: 25: PORTD = 0xFF;
   342  003B  30FF               	movlw	255
   343  003C  0088               	movwf	8	;volatile
   344                           
   345                           ;init.c: 26: _delay((unsigned long)((300)*(4000000/4000.0)));
   346  003D  3002               	movlw	2
   347  003E  1283               	bcf	3,5	;RP0=0, select bank0
   348  003F  1303               	bcf	3,6	;RP1=0, select bank0
   349  0040  00A8               	movwf	??_main+2
   350  0041  3086               	movlw	134
   351  0042  00A7               	movwf	??_main+1
   352  0043  3098               	movlw	152
   353  0044  00A6               	movwf	??_main
   354  0045                     u217:	
   355  0045  0BA6               	decfsz	??_main,f
   356  0046  2845               	goto	u217
   357  0047  0BA7               	decfsz	??_main+1,f
   358  0048  2845               	goto	u217
   359  0049  0BA8               	decfsz	??_main+2,f
   360  004A  2845               	goto	u217
   361  004B  0000               	nop
   362                           
   363                           ;init.c: 27: PORTD = 0;
   364  004C  1283               	bcf	3,5	;RP0=0, select bank0
   365  004D  1303               	bcf	3,6	;RP1=0, select bank0
   366  004E  0188               	clrf	8	;volatile
   367                           
   368                           ;init.c: 28: _delay((unsigned long)((300)*(4000000/4000.0)));
   369  004F  3002               	movlw	2
   370  0050  1283               	bcf	3,5	;RP0=0, select bank0
   371  0051  1303               	bcf	3,6	;RP1=0, select bank0
   372  0052  00A8               	movwf	??_main+2
   373  0053  3086               	movlw	134
   374  0054  00A7               	movwf	??_main+1
   375  0055  3098               	movlw	152
   376  0056  00A6               	movwf	??_main
   377  0057                     u227:	
   378  0057  0BA6               	decfsz	??_main,f
   379  0058  2857               	goto	u227
   380  0059  0BA7               	decfsz	??_main+1,f
   381  005A  2857               	goto	u227
   382  005B  0BA8               	decfsz	??_main+2,f
   383  005C  2857               	goto	u227
   384  005D  0000               	nop
   385                           
   386                           ;main.c: 33: unsigned char temp;
   387                           ;main.c: 34: unsigned int i =0;
   388  005E  1283               	bcf	3,5	;RP0=0, select bank0
   389  005F  1303               	bcf	3,6	;RP1=0, select bank0
   390  0060  01A9               	clrf	main@i
   391  0061  01AA               	clrf	main@i+1
   392                           
   393                           ;main.c: 35: Inter_Init();
   394  0062  120A  118A  215E  120A  118A  	fcall	_Inter_Init
   395  0067  288A               	goto	l819
   396  0068                     l825:	
   397                           ;main.c: 43: case 1: temp = 0; break;
   398                           
   399                           ;main.c: 42: switch(Select4()){
   400                           
   401  0068  1283               	bcf	3,5	;RP0=0, select bank0
   402  0069  1303               	bcf	3,6	;RP1=0, select bank0
   403  006A  01AB               	clrf	main@temp
   404  006B  288A               	goto	l819
   405  006C                     l103:	
   406                           ;main.c: 44: case 2: temp = 1; break;
   407                           
   408  006C  1283               	bcf	3,5	;RP0=0, select bank0
   409  006D  1303               	bcf	3,6	;RP1=0, select bank0
   410  006E  01AB               	clrf	main@temp
   411  006F  0AAB               	incf	main@temp,f
   412  0070  288A               	goto	l819
   413  0071                     l827:	
   414                           ;main.c: 45: case 4: temp = 2; break;
   415                           
   416  0071                     l829:	
   417                           ;main.c: 46: case 8: temp = 2; break;
   418                           
   419  0071  3002               	movlw	2
   420  0072  1283               	bcf	3,5	;RP0=0, select bank0
   421  0073  1303               	bcf	3,6	;RP1=0, select bank0
   422  0074  00A6               	movwf	??_main
   423  0075  0826               	movf	??_main,w
   424  0076  00AB               	movwf	main@temp
   425                           
   426                           ;main.c: 48: }
   427                           
   428                           ;main.c: 47: default: break;
   429  0077  288A               	goto	l819
   430  0078                     l833:	
   431  0078  120A  118A  209C  120A  118A  	fcall	_Select4
   432                           
   433                           ; Switch size 1, requested type "space"
   434                           ; Number of cases is 4, Range of values is 1 to 8
   435                           ; switch strategies available:
   436                           ; Name         Instructions Cycles
   437                           ; simple_byte           13     7 (average)
   438                           ; direct_byte           35    11 (fixed)
   439                           ; jumptable            263     9 (fixed)
   440                           ;	Chosen strategy is simple_byte
   441  007D  3A01               	xorlw	1	; case 1
   442  007E  1903               	skipnz
   443  007F  2868               	goto	l825
   444  0080  3A03               	xorlw	3	; case 2
   445  0081  1903               	skipnz
   446  0082  286C               	goto	l103
   447  0083  3A06               	xorlw	6	; case 4
   448  0084  1903               	skipnz
   449  0085  2871               	goto	l827
   450  0086  3A0C               	xorlw	12	; case 8
   451  0087  1903               	skipnz
   452  0088  2871               	goto	l829
   453  0089  288A               	goto	l819
   454  008A                     l819:	
   455                           ;main.c: 39: while (1) {
   456                           
   457                           ;main.c: 49: }
   458                           
   459                           
   460                           ;main.c: 40: ReadADC();
   461  008A  120A  118A  216E  120A  118A  	fcall	_ReadADC
   462                           
   463                           ;main.c: 41: if(PORTB & 0b00000001){
   464  008F  1283               	bcf	3,5	;RP0=0, select bank0
   465  0090  1303               	bcf	3,6	;RP1=0, select bank0
   466  0091  1806               	btfsc	6,0	;volatile
   467  0092  2878               	goto	l833
   468                           
   469                           ;main.c: 50: else{
   470                           ;main.c: 51: PORTD = Counter[temp];
   471  0093  1283               	bcf	3,5	;RP0=0, select bank0
   472  0094  1303               	bcf	3,6	;RP1=0, select bank0
   473  0095  082B               	movf	main@temp,w
   474  0096  3E2C               	addlw	(low (_Counter| 0))& (0+255)
   475  0097  0084               	movwf	4
   476  0098  1383               	bcf	3,7	;select IRP bank0
   477  0099  0800               	movf	0,w
   478  009A  0088               	movwf	8	;volatile
   479  009B  288A               	goto	l819
   480  009C                     __end_of_main:	
   481                           
   482                           	psect	text1
   483  009C                     __ptext1:	
   484 ;; *************** function _Select4 *****************
   485 ;; Defined at:
   486 ;;		line 50 in file "prologue.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  result          1    5[BANK0 ] unsigned char 
   491 ;;  oldLEDs         1    4[BANK0 ] unsigned char 
   492 ;;  tmp             1    3[BANK0 ] unsigned char 
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      unsigned char 
   495 ;; Registers used:
   496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   502 ;;      Params:         0       0       0       0       0
   503 ;;      Locals:         0       3       0       0       0
   504 ;;      Temps:          0       3       0       0       0
   505 ;;      Totals:         0       6       0       0       0
   506 ;;Total ram usage:        6 bytes
   507 ;; Hardware stack levels used:    1
   508 ;; Hardware stack levels required when called:    2
   509 ;; This function calls:
   510 ;;		_ReadADC
   511 ;;		_ReadSw
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           
   518                           ;psect for function _Select4
   519  009C                     _Select4:	
   520                           
   521                           ;prologue.c: 51: unsigned char tmp, oldLEDs, result;
   522                           ;prologue.c: 52: oldLEDs=PORTD;
   523                           
   524                           ;incstack = 0
   525                           ; Regs used in _Select4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   526  009C  1283               	bcf	3,5	;RP0=0, select bank0
   527  009D  1303               	bcf	3,6	;RP1=0, select bank0
   528  009E  0808               	movf	8,w	;volatile
   529  009F  00A0               	movwf	??_Select4
   530  00A0  0820               	movf	??_Select4,w
   531  00A1  00A4               	movwf	Select4@oldLEDs
   532                           
   533                           ;prologue.c: 53: PORTD=0b00010000;
   534  00A2  3010               	movlw	16
   535  00A3  0088               	movwf	8	;volatile
   536  00A4                     l723:	
   537                           ;prologue.c: 55: do {
   538                           
   539                           
   540                           ;prologue.c: 56: tmp = ReadADC();
   541  00A4  120A  118A  216E  120A  118A  	fcall	_ReadADC
   542  00A9  1283               	bcf	3,5	;RP0=0, select bank0
   543  00AA  1303               	bcf	3,6	;RP1=0, select bank0
   544  00AB  00A0               	movwf	??_Select4
   545  00AC  0820               	movf	??_Select4,w
   546  00AD  00A3               	movwf	Select4@tmp
   547                           
   548                           ;prologue.c: 57: tmp >>= 6;
   549  00AE  0EA3               	swapf	Select4@tmp,f
   550  00AF  0CA3               	rrf	Select4@tmp,f
   551  00B0  0CA3               	rrf	Select4@tmp,f
   552  00B1  3003               	movlw	3
   553  00B2  05A3               	andwf	Select4@tmp,f
   554                           
   555                           ;prologue.c: 58: switch (tmp) {
   556  00B3  28C0               	goto	l733
   557  00B4                     l72:	
   558                           ;prologue.c: 59: case 0: result=1; break;
   559                           
   560  00B4  01A5               	clrf	Select4@result
   561  00B5  0AA5               	incf	Select4@result,f
   562  00B6  28CE               	goto	l735
   563  00B7                     l727:	
   564                           ;prologue.c: 60: case 1: result=2; break;
   565                           
   566  00B7  3002               	movlw	2
   567  00B8  28BC               	goto	L2
   568  00B9                     l729:	
   569                           ;prologue.c: 61: case 2: result=4; break;
   570                           
   571  00B9  3004               	movlw	4
   572  00BA  28BC               	goto	L2
   573  00BB                     l731:	
   574                           ;prologue.c: 62: case 3: result=8;
   575                           
   576  00BB  3008               	movlw	8
   577  00BC                     L2:	
   578  00BC  00A0               	movwf	??_Select4
   579  00BD  0820               	movf	??_Select4,w
   580  00BE  00A5               	movwf	Select4@result
   581                           
   582                           ;prologue.c: 63: }
   583  00BF  28CE               	goto	l735
   584  00C0                     l733:	
   585  00C0  0823               	movf	Select4@tmp,w
   586                           
   587                           ; Switch size 1, requested type "space"
   588                           ; Number of cases is 4, Range of values is 0 to 3
   589                           ; switch strategies available:
   590                           ; Name         Instructions Cycles
   591                           ; simple_byte           13     7 (average)
   592                           ; direct_byte           20     8 (fixed)
   593                           ; jumptable            260     6 (fixed)
   594                           ;	Chosen strategy is simple_byte
   595  00C1  3A00               	xorlw	0	; case 0
   596  00C2  1903               	skipnz
   597  00C3  28B4               	goto	l72
   598  00C4  3A01               	xorlw	1	; case 1
   599  00C5  1903               	skipnz
   600  00C6  28B7               	goto	l727
   601  00C7  3A03               	xorlw	3	; case 2
   602  00C8  1903               	skipnz
   603  00C9  28B9               	goto	l729
   604  00CA  3A01               	xorlw	1	; case 3
   605  00CB  1903               	skipnz
   606  00CC  28BB               	goto	l731
   607  00CD  28CE               	goto	l735
   608  00CE                     l735:	
   609                           
   610                           ;prologue.c: 64: PORTD = result | 0b00010000 | (oldLEDs & 0b11000000);
   611  00CE  0824               	movf	Select4@oldLEDs,w
   612  00CF  39C0               	andlw	192
   613  00D0  0425               	iorwf	Select4@result,w
   614  00D1  3810               	iorlw	16
   615  00D2  0088               	movwf	8	;volatile
   616                           
   617                           ;prologue.c: 65: } while( ReadSw() );
   618  00D3  120A  118A  2145  120A  118A  	fcall	_ReadSw
   619  00D8  3A00               	xorlw	0
   620  00D9  1D03               	skipz
   621  00DA  28A4               	goto	l723
   622                           
   623                           ;prologue.c: 67: PORTD = 0; _delay((unsigned long)((300)*(4000000/4000.0)));
   624  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   625  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   626  00DD  0188               	clrf	8	;volatile
   627  00DE  3002               	movlw	2
   628  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   629  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   630  00E1  00A2               	movwf	??_Select4+2
   631  00E2  3086               	movlw	134
   632  00E3  00A1               	movwf	??_Select4+1
   633  00E4  3098               	movlw	152
   634  00E5  00A0               	movwf	??_Select4
   635  00E6                     u237:	
   636  00E6  0BA0               	decfsz	??_Select4,f
   637  00E7  28E6               	goto	u237
   638  00E8  0BA1               	decfsz	??_Select4+1,f
   639  00E9  28E6               	goto	u237
   640  00EA  0BA2               	decfsz	??_Select4+2,f
   641  00EB  28E6               	goto	u237
   642  00EC  0000               	nop
   643                           
   644                           ;prologue.c: 68: PORTD = result; _delay((unsigned long)((400)*(4000000/4000.0)));
   645  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   646  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   647  00EF  0825               	movf	Select4@result,w
   648  00F0  0088               	movwf	8	;volatile
   649  00F1  3003               	movlw	3
   650  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   651  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   652  00F4  00A2               	movwf	??_Select4+2
   653  00F5  3008               	movlw	8
   654  00F6  00A1               	movwf	??_Select4+1
   655  00F7  3076               	movlw	118
   656  00F8  00A0               	movwf	??_Select4
   657  00F9                     u247:	
   658  00F9  0BA0               	decfsz	??_Select4,f
   659  00FA  28F9               	goto	u247
   660  00FB  0BA1               	decfsz	??_Select4+1,f
   661  00FC  28F9               	goto	u247
   662  00FD  0BA2               	decfsz	??_Select4+2,f
   663  00FE  28F9               	goto	u247
   664  00FF  0000               	nop
   665                           
   666                           ;prologue.c: 69: PORTD = 0; _delay((unsigned long)((300)*(4000000/4000.0)));
   667  0100  1283               	bcf	3,5	;RP0=0, select bank0
   668  0101  1303               	bcf	3,6	;RP1=0, select bank0
   669  0102  0188               	clrf	8	;volatile
   670  0103  3002               	movlw	2
   671  0104  1283               	bcf	3,5	;RP0=0, select bank0
   672  0105  1303               	bcf	3,6	;RP1=0, select bank0
   673  0106  00A2               	movwf	??_Select4+2
   674  0107  3086               	movlw	134
   675  0108  00A1               	movwf	??_Select4+1
   676  0109  3098               	movlw	152
   677  010A  00A0               	movwf	??_Select4
   678  010B                     u257:	
   679  010B  0BA0               	decfsz	??_Select4,f
   680  010C  290B               	goto	u257
   681  010D  0BA1               	decfsz	??_Select4+1,f
   682  010E  290B               	goto	u257
   683  010F  0BA2               	decfsz	??_Select4+2,f
   684  0110  290B               	goto	u257
   685  0111  0000               	nop
   686                           
   687                           ;prologue.c: 71: PORTD=oldLEDs;
   688  0112  1283               	bcf	3,5	;RP0=0, select bank0
   689  0113  1303               	bcf	3,6	;RP1=0, select bank0
   690  0114  0824               	movf	Select4@oldLEDs,w
   691  0115  0088               	movwf	8	;volatile
   692                           
   693                           ;prologue.c: 72: return result;
   694  0116  0825               	movf	Select4@result,w
   695  0117  0008               	return
   696  0118                     __end_of_Select4:	
   697                           
   698                           	psect	text2
   699  0145                     __ptext2:	
   700 ;; *************** function _ReadSw *****************
   701 ;; Defined at:
   702 ;;		line 41 in file "prologue.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  tmp             1    7[COMMON] unsigned char 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      unsigned char 
   709 ;; Registers used:
   710 ;;		wreg, status,2
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   716 ;;      Params:         0       0       0       0       0
   717 ;;      Locals:         1       0       0       0       0
   718 ;;      Temps:          2       0       0       0       0
   719 ;;      Totals:         3       0       0       0       0
   720 ;;Total ram usage:        3 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    1
   723 ;; This function calls:
   724 ;;		Nothing
   725 ;; This function is called by:
   726 ;;		_Select4
   727 ;;		_SelectB
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           
   732                           ;psect for function _ReadSw
   733  0145                     _ReadSw:	
   734  0145                     l65:	
   735                           ;incstack = 0
   736                           ; Regs used in _ReadSw: [wreg+status,2]
   737                           ;prologue.c: 42: unsigned char tmp;
   738                           ;prologue.c: 43: do {
   739                           
   740                           
   741                           ;prologue.c: 44: tmp = PORTB & 0b00000001;
   742  0145  1283               	bcf	3,5	;RP0=0, select bank0
   743  0146  1303               	bcf	3,6	;RP1=0, select bank0
   744  0147  0806               	movf	6,w	;volatile
   745  0148  3901               	andlw	1
   746  0149  00F5               	movwf	??_ReadSw
   747  014A  0875               	movf	??_ReadSw,w
   748  014B  00F7               	movwf	ReadSw@tmp
   749                           
   750                           ;prologue.c: 45: _delay((unsigned long)((20)*(4000000/4000.0)));
   751  014C  301A               	movlw	26
   752  014D  00F6               	movwf	??_ReadSw+1
   753  014E  30F8               	movlw	248
   754  014F  00F5               	movwf	??_ReadSw
   755  0150                     u267:	
   756  0150  0BF5               	decfsz	??_ReadSw,f
   757  0151  2950               	goto	u267
   758  0152  0BF6               	decfsz	??_ReadSw+1,f
   759  0153  2950               	goto	u267
   760  0154  0000               	nop
   761                           
   762                           ;prologue.c: 46: } while( tmp != (PORTB & 0b00000001) );
   763  0155  1283               	bcf	3,5	;RP0=0, select bank0
   764  0156  1303               	bcf	3,6	;RP1=0, select bank0
   765  0157  0806               	movf	6,w	;volatile
   766  0158  3901               	andlw	1
   767  0159  0677               	xorwf	ReadSw@tmp,w
   768  015A  1D03               	skipz
   769  015B  2945               	goto	l65
   770                           
   771                           ;prologue.c: 47: return tmp;
   772  015C  0877               	movf	ReadSw@tmp,w
   773  015D  0008               	return
   774  015E                     __end_of_ReadSw:	
   775                           
   776                           	psect	text3
   777  016E                     __ptext3:	
   778 ;; *************** function _ReadADC *****************
   779 ;; Defined at:
   780 ;;		line 34 in file "prologue.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      unsigned char 
   787 ;; Registers used:
   788 ;;		wreg
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0
   796 ;;      Temps:          0       0       0       0       0
   797 ;;      Totals:         0       0       0       0       0
   798 ;;Total ram usage:        0 bytes
   799 ;; Hardware stack levels used:    1
   800 ;; Hardware stack levels required when called:    1
   801 ;; This function calls:
   802 ;;		Nothing
   803 ;; This function is called by:
   804 ;;		_Select4
   805 ;;		_main
   806 ;;		_SelectB
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           
   811                           ;psect for function _ReadADC
   812  016E                     _ReadADC:	
   813                           
   814                           ;prologue.c: 35: ADCON0 |= 0b00000010;
   815                           
   816                           ;incstack = 0
   817                           ; Regs used in _ReadADC: [wreg]
   818  016E  1283               	bcf	3,5	;RP0=0, select bank0
   819  016F  1303               	bcf	3,6	;RP1=0, select bank0
   820  0170  149F               	bsf	31,1	;volatile
   821  0171                     l59:	
   822                           ;prologue.c: 36: while ( (ADCON0 & 0b00000010) );
   823                           
   824  0171  189F               	btfsc	31,1	;volatile
   825  0172  2971               	goto	l59
   826                           
   827                           ;prologue.c: 37: return ADRESH;
   828  0173  081E               	movf	30,w	;volatile
   829  0174  0008               	return
   830  0175                     __end_of_ReadADC:	
   831                           
   832                           	psect	text4
   833  015E                     __ptext4:	
   834 ;; *************** function _Inter_Init *****************
   835 ;; Defined at:
   836 ;;		line 59 in file "main.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   850 ;;      Params:         0       0       0       0       0
   851 ;;      Locals:         0       0       0       0       0
   852 ;;      Temps:          0       0       0       0       0
   853 ;;      Totals:         0       0       0       0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    1
   857 ;; This function calls:
   858 ;;		Nothing
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           
   865                           ;psect for function _Inter_Init
   866  015E                     _Inter_Init:	
   867                           
   868                           ;main.c: 60: OPTION_REGbits.INTEDG = 1;
   869                           
   870                           ;incstack = 0
   871                           ; Regs used in _Inter_Init: [wreg]
   872  015E  1683               	bsf	3,5	;RP0=1, select bank1
   873  015F  1303               	bcf	3,6	;RP1=0, select bank1
   874  0160  1701               	bsf	1,6	;volatile
   875                           
   876                           ;main.c: 61: PIE1 = 0b01000001;
   877  0161  3041               	movlw	65
   878  0162  008C               	movwf	12	;volatile
   879                           
   880                           ;main.c: 62: TMR1H = 0b11110100;
   881  0163  30F4               	movlw	244
   882  0164  1283               	bcf	3,5	;RP0=0, select bank0
   883  0165  1303               	bcf	3,6	;RP1=0, select bank0
   884  0166  008F               	movwf	15	;volatile
   885                           
   886                           ;main.c: 63: TMR1L = 0b00100100;
   887  0167  3024               	movlw	36
   888  0168  008E               	movwf	14	;volatile
   889                           
   890                           ;main.c: 64: T1CON = 0b00110001;
   891  0169  3031               	movlw	49
   892  016A  0090               	movwf	16	;volatile
   893                           
   894                           ;main.c: 65: INTCON = 0b11010000;
   895  016B  30D0               	movlw	208
   896  016C  008B               	movwf	11	;volatile
   897  016D  0008               	return
   898  016E                     __end_of_Inter_Init:	
   899                           
   900                           	psect	text5
   901  0118                     __ptext5:	
   902 ;; *************** function _ISR *****************
   903 ;; Defined at:
   904 ;;		line 7 in file "main.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, status,2, status,0
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   918 ;;      Params:         0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0
   920 ;;      Temps:          5       0       0       0       0
   921 ;;      Totals:         5       0       0       0       0
   922 ;;Total ram usage:        5 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; This function calls:
   925 ;;		Nothing
   926 ;; This function is called by:
   927 ;;		Interrupt level 1
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           
   932                           ;psect for function _ISR
   933  0118                     _ISR:	
   934                           
   935                           ;main.c: 8: if((!GO)&ADIF){
   936  0118  1F0C               	btfss	12,6	;volatile
   937  0119  291C               	goto	u15_20
   938  011A  3001               	movlw	1
   939  011B  291D               	goto	u15_22
   940  011C                     u15_20:	
   941  011C  3000               	movlw	0
   942  011D                     u15_22:	
   943  011D  00F0               	movwf	??_ISR
   944  011E  189F               	btfsc	31,1	;volatile
   945  011F  2922               	goto	u16_20
   946  0120  3001               	movlw	1
   947  0121  2923               	goto	u16_22
   948  0122                     u16_20:	
   949  0122  3000               	movlw	0
   950  0123                     u16_22:	
   951  0123  0570               	andwf	??_ISR,w
   952  0124  3800               	iorlw	0
   953  0125  1903               	skipnz
   954  0126  292C               	goto	i1l783
   955                           
   956                           ;main.c: 9: ADIF = 0;
   957  0127  130C               	bcf	12,6	;volatile
   958                           
   959                           ;main.c: 10: Counter[0] ++ ;
   960  0128  3001               	movlw	1
   961  0129  00F0               	movwf	??_ISR
   962  012A  0870               	movf	??_ISR,w
   963  012B  07AC               	addwf	_Counter,f
   964  012C                     i1l783:	
   965                           
   966                           ;main.c: 12: }
   967                           ;main.c: 14: if(TMR1IF){
   968  012C  1C0C               	btfss	12,0	;volatile
   969  012D  2933               	goto	i1l789
   970                           
   971                           ;main.c: 15: TMR1IF =0;
   972  012E  100C               	bcf	12,0	;volatile
   973                           
   974                           ;main.c: 16: Counter[1] ++;
   975  012F  3001               	movlw	1
   976  0130  00F0               	movwf	??_ISR
   977  0131  0870               	movf	??_ISR,w
   978  0132  07AD               	addwf	_Counter+1,f
   979  0133                     i1l789:	
   980                           
   981                           ;main.c: 17: }
   982                           ;main.c: 18: if(INTF){
   983  0133  1C8B               	btfss	11,1	;volatile
   984  0134  293A               	goto	i1l93
   985                           
   986                           ;main.c: 19: INTF = 0 ;
   987  0135  108B               	bcf	11,1	;volatile
   988                           
   989                           ;main.c: 20: Counter[2] ++;
   990  0136  3001               	movlw	1
   991  0137  00F0               	movwf	??_ISR
   992  0138  0870               	movf	??_ISR,w
   993  0139  07AE               	addwf	_Counter+2,f
   994  013A                     i1l93:	
   995  013A  0874               	movf	??_ISR+4,w
   996  013B  00FF               	movwf	127
   997  013C  0873               	movf	??_ISR+3,w
   998  013D  008A               	movwf	10
   999  013E  0872               	movf	??_ISR+2,w
  1000  013F  0084               	movwf	4
  1001  0140  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1002  0141  0083               	movwf	3
  1003  0142  0EFE               	swapf	126,f
  1004  0143  0E7E               	swapf	126,w
  1005  0144  0009               	retfie
  1006  0145                     __end_of_ISR:	
  1007  007E                     btemp	set	126	;btemp
  1008  007E                     wtemp0	set	126
  1009                           
  1010                           	psect	intentry
  1011  0004                     __pintentry:	
  1012                           ;incstack = 0
  1013                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1014                           
  1015  0004                     interrupt_function:	
  1016  007E                     saved_w	set	btemp
  1017  0004  00FE               	movwf	btemp
  1018  0005  0E03               	swapf	3,w
  1019  0006  00F1               	movwf	??_ISR+1
  1020  0007  0804               	movf	4,w
  1021  0008  00F2               	movwf	??_ISR+2
  1022  0009  080A               	movf	10,w
  1023  000A  00F3               	movwf	??_ISR+3
  1024  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1025  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1026  000D  087F               	movf	btemp+1,w
  1027  000E  00F4               	movwf	??_ISR+4
  1028  000F  120A  118A  2918   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     12      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _Select4->_ReadSw

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Select4

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     211
                                              6 BANK0      6     6      0
                         _Inter_Init
                            _ReadADC
                            _Select4
 ---------------------------------------------------------------------------------
 (1) _Select4                                              6     6      0     184
                                              0 BANK0      6     6      0
                            _ReadADC
                             _ReadSw
 ---------------------------------------------------------------------------------
 (2) _ReadSw                                               3     3      0      45
                                              5 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Inter_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Inter_Init
   _ReadADC
   _Select4
     _ReadADC
     _ReadSw

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      17       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      17      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Nov 28 00:53:00 2017

                      l72 00B4                        l65 0145                        l59 0171  
                      _GO 00F9                       l103 006C                       l731 00BB  
                     l723 00A4                       l733 00C0                       l727 00B7  
                     l735 00CE                       l729 00B9                       l825 0068  
                     l833 0078                       l827 0071                       l819 008A  
                     l829 0071                       u217 0045                       u227 0057  
                     u237 00E6                       u247 00F9                       u257 010B  
                     u267 0150                       _ISR 0118                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      ?_ISR 0070  
                    _ADIF 0066             __CFG_DEBUG$ON 0000                      _PIE1 008C  
                    _INTF 0059                      i1l93 013A                      _main 001E  
                    btemp 007E                      start 0012             __CFG_IESO$OFF 0000  
           Select4@result 0025           __end_of_ReadADC 0175                     ??_ISR 0070  
         __end_of_Select4 0118                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     _T1CON 0010                     i1l783 012C  
                   i1l789 0133                     u15_20 011C                     u15_22 011D  
                   u16_20 0122                     u16_22 0123                     _TMR1H 000F  
                   _TMR1L 000E                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _PORTE 0009  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089             __CFG_PWRTE$ON 0000  
          __CFG_FCMEN$OFF 0000                     main@i 0029            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
          Select4@oldLEDs 0024                Select4@tmp 0023           __initialization 0015  
            __end_of_main 009C                    ??_main 0026                _Inter_Init 015E  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ANSELH 0189                    _INTCON 000B                    _TMR1IF 0060  
               ??_ReadADC 0075                    _ReadSw 0145                 ??_Select4 0020  
                  saved_w 007E   __end_of__initialization 001A            __pcstackCOMMON 0070  
             ?_Inter_Init 0070            _OPTION_REGbits 0081                __pbssBANK0 002C  
                 ?_ReadSw 0070                __pmaintext 001E                __pintentry 0004  
                 _ReadADC 016E                   _Counter 002C       __size_of_Inter_Init 0010  
                 _Select4 009C           __size_of_ReadSw 0019                   __ptext1 009C  
                 __ptext2 0145                   __ptext3 016E                   __ptext4 015E  
                 __ptext5 0118              __size_of_ISR 002D      end_of_initialization 001A  
               ReadSw@tmp 0077            __end_of_ReadSw 015E              ??_Inter_Init 0075  
     start_initialization 0015               __end_of_ISR 0145  __CFG_FOSC$INTRC_NOCLKOUT 0000  
      __end_of_Inter_Init 016E                  ??_ReadSw 0075                 ___latbits 0002  
           __pcstackBANK0 0020                  ?_ReadADC 0070                  ?_Select4 0070  
       interrupt_function 0004          __size_of_ReadADC 0007          __size_of_Select4 007C  
       __CFG_BOR4V$BOR21V 0000             __size_of_main 007E                  main@temp 002B  
                intlevel1 0000                _OPTION_REG 0081  
