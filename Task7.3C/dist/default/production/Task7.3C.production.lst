

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov 17 05:48:50 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.44
    18                           ; Generated 14/09/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0010                     _T1CON	set	16
   130  000E                     _TMR1L	set	14
   131  000F                     _TMR1H	set	15
   132  000B                     _INTCON	set	11
   133  0009                     _PORTE	set	9
   134  0007                     _PORTC	set	7
   135  0005                     _PORTA	set	5
   136  0008                     _PORTD	set	8
   137  0006                     _PORTB	set	6
   138  001E                     _ADRESH	set	30
   139  001F                     _ADCON0	set	31
   140  0059                     _INTF	set	89
   141  0060                     _TMR1IF	set	96
   142  0066                     _ADIF	set	102
   143  00F9                     _GO	set	249
   144  008C                     _PIE1	set	140
   145  0081                     _OPTION_REGbits	set	129
   146  009F                     _ADCON1	set	159
   147  0081                     _OPTION_REG	set	129
   148  0089                     _TRISE	set	137
   149  0088                     _TRISD	set	136
   150  0087                     _TRISC	set	135
   151  0086                     _TRISB	set	134
   152  0085                     _TRISA	set	133
   153  0188                     _ANSEL	set	392
   154  0189                     _ANSELH	set	393
   155                           
   156                           ; #config settings
   157  0000                     
   158                           	psect	cinit
   159  0015                     start_initialization:	
   160  0015                     __initialization:	
   161                           
   162                           ; Clear objects allocated to BANK0
   163  0015  1283               	bcf	3,5	;RP0=0, select bank0
   164  0016  1303               	bcf	3,6	;RP1=0, select bank0
   165  0017  01AC               	clrf	__pbssBANK0& (0+127)
   166  0018  01AD               	clrf	(__pbssBANK0+1)& (0+127)
   167  0019  01AE               	clrf	(__pbssBANK0+2)& (0+127)
   168  001A                     end_of_initialization:	
   169                           ;End of C runtime variable initialization code
   170                           
   171  001A                     __end_of__initialization:	
   172  001A  0183               	clrf	3
   173  001B  120A  118A  281E   	ljmp	_main	;jump to C main() function
   174                           
   175                           	psect	bssBANK0
   176  002C                     __pbssBANK0:	
   177  002C                     _Counter:	
   178  002C                     	ds	3
   179                           
   180                           	psect	cstackCOMMON
   181  0070                     __pcstackCOMMON:	
   182  0070                     ?_Inter_Init:	
   183  0070                     ?_ReadADC:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_ReadSw:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_Select4:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_ISR:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ??_ISR:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_main:	
   199                           ; 1 bytes @ 0x0
   200                           
   201                           
   202                           ; 2 bytes @ 0x0
   203  0070                     	ds	5
   204  0075                     ??_Inter_Init:	
   205  0075                     ??_ReadADC:	
   206                           ; 1 bytes @ 0x5
   207                           
   208  0075                     ??_ReadSw:	
   209                           ; 1 bytes @ 0x5
   210                           
   211                           
   212                           ; 1 bytes @ 0x5
   213  0075                     	ds	2
   214  0077                     ReadSw@tmp:	
   215                           
   216                           ; 1 bytes @ 0x7
   217  0077                     	ds	1
   218                           
   219                           	psect	cstackBANK0
   220  0020                     __pcstackBANK0:	
   221  0020                     ??_Select4:	
   222                           
   223                           ; 1 bytes @ 0x0
   224  0020                     	ds	3
   225  0023                     Select4@tmp:	
   226                           
   227                           ; 1 bytes @ 0x3
   228  0023                     	ds	1
   229  0024                     Select4@oldLEDs:	
   230                           
   231                           ; 1 bytes @ 0x4
   232  0024                     	ds	1
   233  0025                     Select4@result:	
   234                           
   235                           ; 1 bytes @ 0x5
   236  0025                     	ds	1
   237  0026                     ??_main:	
   238                           
   239                           ; 1 bytes @ 0x6
   240  0026                     	ds	3
   241  0029                     main@temp:	
   242                           
   243                           ; 1 bytes @ 0x9
   244  0029                     	ds	1
   245  002A                     main@i:	
   246                           
   247                           ; 2 bytes @ 0xA
   248  002A                     	ds	2
   249                           
   250                           	psect	maintext
   251  001E                     __pmaintext:	
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 26 in file "main.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;  i               2   10[BANK0 ] unsigned int 
   262 ;;  temp            1    9[BANK0 ] unsigned char 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  2   97[None  ] int 
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : B00/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   272 ;;      Params:         0       0       0       0       0
   273 ;;      Locals:         0       3       0       0       0
   274 ;;      Temps:          0       3       0       0       0
   275 ;;      Totals:         0       6       0       0       0
   276 ;;Total ram usage:        6 bytes
   277 ;; Hardware stack levels required when called:    3
   278 ;; This function calls:
   279 ;;		_Inter_Init
   280 ;;		_ReadADC
   281 ;;		_Select4
   282 ;; This function is called by:
   283 ;;		Startup code after reset
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           
   288                           ;psect for function _main
   289  001E                     _main:	
   290                           
   291                           ;init.c: 4: PORTA=0; PORTB=0; PORTC=0; PORTD=0; PORTE=0;
   292                           
   293                           ;incstack = 0
   294                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   295  001E  1283               	bcf	3,5	;RP0=0, select bank0
   296  001F  1303               	bcf	3,6	;RP1=0, select bank0
   297  0020  0185               	clrf	5	;volatile
   298  0021  0186               	clrf	6	;volatile
   299  0022  0187               	clrf	7	;volatile
   300  0023  0188               	clrf	8	;volatile
   301  0024  0189               	clrf	9	;volatile
   302                           
   303                           ;init.c: 7: ANSELH= 0;
   304  0025  1683               	bsf	3,5	;RP0=1, select bank3
   305  0026  1703               	bsf	3,6	;RP1=1, select bank3
   306  0027  0189               	clrf	9	;volatile
   307                           
   308                           ;init.c: 8: ANSEL = 0b00000001;
   309  0028  3001               	movlw	1
   310  0029  0088               	movwf	8	;volatile
   311                           
   312                           ;init.c: 9: TRISA = 0b00000001;
   313  002A  3001               	movlw	1
   314  002B  1683               	bsf	3,5	;RP0=1, select bank1
   315  002C  1303               	bcf	3,6	;RP1=0, select bank1
   316  002D  0085               	movwf	5	;volatile
   317                           
   318                           ;init.c: 12: TRISB = 0b00000001;
   319  002E  3001               	movlw	1
   320  002F  0086               	movwf	6	;volatile
   321                           
   322                           ;init.c: 15: TRISC=0; TRISD=0; TRISE=0b11111000;
   323  0030  0187               	clrf	7	;volatile
   324  0031  0188               	clrf	8	;volatile
   325  0032  30F8               	movlw	248
   326  0033  0089               	movwf	9	;volatile
   327                           
   328                           ;init.c: 18: OPTION_REG = 0b00001000;
   329  0034  3008               	movlw	8
   330  0035  0081               	movwf	1	;volatile
   331                           
   332                           ;init.c: 21: ADCON1 = 0;
   333  0036  019F               	clrf	31	;volatile
   334                           
   335                           ;init.c: 22: ADCON0 = 0b01000001;
   336  0037  3041               	movlw	65
   337  0038  1283               	bcf	3,5	;RP0=0, select bank0
   338  0039  1303               	bcf	3,6	;RP1=0, select bank0
   339  003A  009F               	movwf	31	;volatile
   340                           
   341                           ;init.c: 25: PORTD = 0xFF;
   342  003B  30FF               	movlw	255
   343  003C  0088               	movwf	8	;volatile
   344                           
   345                           ;init.c: 26: _delay((unsigned long)((300)*(4000000/4000.0)));
   346  003D  3002               	movlw	2
   347  003E  1283               	bcf	3,5	;RP0=0, select bank0
   348  003F  1303               	bcf	3,6	;RP1=0, select bank0
   349  0040  00A8               	movwf	??_main+2
   350  0041  3086               	movlw	134
   351  0042  00A7               	movwf	??_main+1
   352  0043  3098               	movlw	152
   353  0044  00A6               	movwf	??_main
   354  0045                     u257:	
   355  0045  0BA6               	decfsz	??_main,f
   356  0046  2845               	goto	u257
   357  0047  0BA7               	decfsz	??_main+1,f
   358  0048  2845               	goto	u257
   359  0049  0BA8               	decfsz	??_main+2,f
   360  004A  2845               	goto	u257
   361  004B  0000               	nop
   362                           
   363                           ;init.c: 27: PORTD = 0;
   364  004C  1283               	bcf	3,5	;RP0=0, select bank0
   365  004D  1303               	bcf	3,6	;RP1=0, select bank0
   366  004E  0188               	clrf	8	;volatile
   367                           
   368                           ;init.c: 28: _delay((unsigned long)((300)*(4000000/4000.0)));
   369  004F  3002               	movlw	2
   370  0050  1283               	bcf	3,5	;RP0=0, select bank0
   371  0051  1303               	bcf	3,6	;RP1=0, select bank0
   372  0052  00A8               	movwf	??_main+2
   373  0053  3086               	movlw	134
   374  0054  00A7               	movwf	??_main+1
   375  0055  3098               	movlw	152
   376  0056  00A6               	movwf	??_main
   377  0057                     u267:	
   378  0057  0BA6               	decfsz	??_main,f
   379  0058  2857               	goto	u267
   380  0059  0BA7               	decfsz	??_main+1,f
   381  005A  2857               	goto	u267
   382  005B  0BA8               	decfsz	??_main+2,f
   383  005C  2857               	goto	u267
   384  005D  0000               	nop
   385                           
   386                           ;main.c: 33: unsigned char temp;
   387                           ;main.c: 34: unsigned int i =0;
   388  005E  1283               	bcf	3,5	;RP0=0, select bank0
   389  005F  1303               	bcf	3,6	;RP1=0, select bank0
   390  0060  01AA               	clrf	main@i
   391  0061  01AB               	clrf	main@i+1
   392                           
   393                           ;main.c: 35: Inter_Init();
   394  0062  120A  118A  2176  120A  118A  	fcall	_Inter_Init
   395  0067  288A               	goto	l829
   396  0068                     l843:	
   397                           ;main.c: 45: case 1: temp = 0; break;
   398                           
   399                           ;main.c: 44: switch(Select4()){
   400                           
   401  0068  1283               	bcf	3,5	;RP0=0, select bank0
   402  0069  1303               	bcf	3,6	;RP1=0, select bank0
   403  006A  01A9               	clrf	main@temp
   404  006B  288A               	goto	l829
   405  006C                     l105:	
   406                           ;main.c: 46: case 2: temp = 1; break;
   407                           
   408  006C  1283               	bcf	3,5	;RP0=0, select bank0
   409  006D  1303               	bcf	3,6	;RP1=0, select bank0
   410  006E  01A9               	clrf	main@temp
   411  006F  0AA9               	incf	main@temp,f
   412  0070  288A               	goto	l829
   413  0071                     l845:	
   414                           ;main.c: 47: case 4: temp = 2; break;
   415                           
   416  0071                     l847:	
   417                           ;main.c: 48: case 8: temp = 2; break;
   418                           
   419  0071  3002               	movlw	2
   420  0072  1283               	bcf	3,5	;RP0=0, select bank0
   421  0073  1303               	bcf	3,6	;RP1=0, select bank0
   422  0074  00A6               	movwf	??_main
   423  0075  0826               	movf	??_main,w
   424  0076  00A9               	movwf	main@temp
   425                           
   426                           ;main.c: 50: }
   427                           
   428                           ;main.c: 49: default: break;
   429  0077  288A               	goto	l829
   430  0078                     l851:	
   431  0078  120A  118A  20B4  120A  118A  	fcall	_Select4
   432                           
   433                           ; Switch size 1, requested type "space"
   434                           ; Number of cases is 4, Range of values is 1 to 8
   435                           ; switch strategies available:
   436                           ; Name         Instructions Cycles
   437                           ; simple_byte           13     7 (average)
   438                           ; direct_byte           35    11 (fixed)
   439                           ; jumptable            263     9 (fixed)
   440                           ;	Chosen strategy is simple_byte
   441  007D  3A01               	xorlw	1	; case 1
   442  007E  1903               	skipnz
   443  007F  2868               	goto	l843
   444  0080  3A03               	xorlw	3	; case 2
   445  0081  1903               	skipnz
   446  0082  286C               	goto	l105
   447  0083  3A06               	xorlw	6	; case 4
   448  0084  1903               	skipnz
   449  0085  2871               	goto	l845
   450  0086  3A0C               	xorlw	12	; case 8
   451  0087  1903               	skipnz
   452  0088  2871               	goto	l847
   453  0089  288A               	goto	l829
   454  008A                     l829:	
   455                           ;main.c: 39: while (1) {
   456                           
   457                           ;main.c: 51: }
   458                           
   459                           
   460                           ;main.c: 40: i++;
   461  008A  3001               	movlw	1
   462  008B  1283               	bcf	3,5	;RP0=0, select bank0
   463  008C  1303               	bcf	3,6	;RP1=0, select bank0
   464  008D  07AA               	addwf	main@i,f
   465  008E  1803               	skipnc
   466  008F  0AAB               	incf	main@i+1,f
   467  0090  3000               	movlw	0
   468  0091  07AB               	addwf	main@i+1,f
   469                           
   470                           ;main.c: 41: if(i >1000) ReadADC();
   471  0092  3003               	movlw	3
   472  0093  022B               	subwf	main@i+1,w
   473  0094  30E9               	movlw	233
   474  0095  1903               	skipnz
   475  0096  022A               	subwf	main@i,w
   476  0097  1C03               	skipc
   477  0098  289E               	goto	l835
   478  0099  120A  118A  2186  120A  118A  	fcall	_ReadADC
   479  009E                     l835:	
   480                           
   481                           ;main.c: 42: if(i >1001) i =0;
   482  009E  3003               	movlw	3
   483  009F  1283               	bcf	3,5	;RP0=0, select bank0
   484  00A0  1303               	bcf	3,6	;RP1=0, select bank0
   485  00A1  022B               	subwf	main@i+1,w
   486  00A2  30EA               	movlw	234
   487  00A3  1903               	skipnz
   488  00A4  022A               	subwf	main@i,w
   489  00A5  1C03               	skipc
   490  00A6  28A9               	goto	l839
   491  00A7  01AA               	clrf	main@i
   492  00A8  01AB               	clrf	main@i+1
   493  00A9                     l839:	
   494                           
   495                           ;main.c: 43: if(PORTB & 0b00000001){
   496  00A9  1806               	btfsc	6,0	;volatile
   497  00AA  2878               	goto	l851
   498                           
   499                           ;main.c: 52: else{
   500                           ;main.c: 53: PORTD = Counter[temp];
   501  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   502  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   503  00AD  0829               	movf	main@temp,w
   504  00AE  3E2C               	addlw	(low (_Counter| 0))& (0+255)
   505  00AF  0084               	movwf	4
   506  00B0  1383               	bcf	3,7	;select IRP bank0
   507  00B1  0800               	movf	0,w
   508  00B2  0088               	movwf	8	;volatile
   509  00B3  288A               	goto	l829
   510  00B4                     __end_of_main:	
   511                           
   512                           	psect	text1
   513  00B4                     __ptext1:	
   514 ;; *************** function _Select4 *****************
   515 ;; Defined at:
   516 ;;		line 50 in file "prologue.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  result          1    5[BANK0 ] unsigned char 
   521 ;;  oldLEDs         1    4[BANK0 ] unsigned char 
   522 ;;  tmp             1    3[BANK0 ] unsigned char 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      unsigned char 
   525 ;; Registers used:
   526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   532 ;;      Params:         0       0       0       0       0
   533 ;;      Locals:         0       3       0       0       0
   534 ;;      Temps:          0       3       0       0       0
   535 ;;      Totals:         0       6       0       0       0
   536 ;;Total ram usage:        6 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    2
   539 ;; This function calls:
   540 ;;		_ReadADC
   541 ;;		_ReadSw
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _Select4
   549  00B4                     _Select4:	
   550                           
   551                           ;prologue.c: 51: unsigned char tmp, oldLEDs, result;
   552                           ;prologue.c: 52: oldLEDs=PORTD;
   553                           
   554                           ;incstack = 0
   555                           ; Regs used in _Select4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   556  00B4  1283               	bcf	3,5	;RP0=0, select bank0
   557  00B5  1303               	bcf	3,6	;RP1=0, select bank0
   558  00B6  0808               	movf	8,w	;volatile
   559  00B7  00A0               	movwf	??_Select4
   560  00B8  0820               	movf	??_Select4,w
   561  00B9  00A4               	movwf	Select4@oldLEDs
   562                           
   563                           ;prologue.c: 53: PORTD=0b00010000;
   564  00BA  3010               	movlw	16
   565  00BB  0088               	movwf	8	;volatile
   566  00BC                     l733:	
   567                           ;prologue.c: 55: do {
   568                           
   569                           
   570                           ;prologue.c: 56: tmp = ReadADC();
   571  00BC  120A  118A  2186  120A  118A  	fcall	_ReadADC
   572  00C1  1283               	bcf	3,5	;RP0=0, select bank0
   573  00C2  1303               	bcf	3,6	;RP1=0, select bank0
   574  00C3  00A0               	movwf	??_Select4
   575  00C4  0820               	movf	??_Select4,w
   576  00C5  00A3               	movwf	Select4@tmp
   577                           
   578                           ;prologue.c: 57: tmp >>= 6;
   579  00C6  0EA3               	swapf	Select4@tmp,f
   580  00C7  0CA3               	rrf	Select4@tmp,f
   581  00C8  0CA3               	rrf	Select4@tmp,f
   582  00C9  3003               	movlw	3
   583  00CA  05A3               	andwf	Select4@tmp,f
   584                           
   585                           ;prologue.c: 58: switch (tmp) {
   586  00CB  28D8               	goto	l743
   587  00CC                     l72:	
   588                           ;prologue.c: 59: case 0: result=1; break;
   589                           
   590  00CC  01A5               	clrf	Select4@result
   591  00CD  0AA5               	incf	Select4@result,f
   592  00CE  28E6               	goto	l745
   593  00CF                     l737:	
   594                           ;prologue.c: 60: case 1: result=2; break;
   595                           
   596  00CF  3002               	movlw	2
   597  00D0  28D4               	goto	L2
   598  00D1                     l739:	
   599                           ;prologue.c: 61: case 2: result=4; break;
   600                           
   601  00D1  3004               	movlw	4
   602  00D2  28D4               	goto	L2
   603  00D3                     l741:	
   604                           ;prologue.c: 62: case 3: result=8;
   605                           
   606  00D3  3008               	movlw	8
   607  00D4                     L2:	
   608  00D4  00A0               	movwf	??_Select4
   609  00D5  0820               	movf	??_Select4,w
   610  00D6  00A5               	movwf	Select4@result
   611                           
   612                           ;prologue.c: 63: }
   613  00D7  28E6               	goto	l745
   614  00D8                     l743:	
   615  00D8  0823               	movf	Select4@tmp,w
   616                           
   617                           ; Switch size 1, requested type "space"
   618                           ; Number of cases is 4, Range of values is 0 to 3
   619                           ; switch strategies available:
   620                           ; Name         Instructions Cycles
   621                           ; simple_byte           13     7 (average)
   622                           ; direct_byte           20     8 (fixed)
   623                           ; jumptable            260     6 (fixed)
   624                           ;	Chosen strategy is simple_byte
   625  00D9  3A00               	xorlw	0	; case 0
   626  00DA  1903               	skipnz
   627  00DB  28CC               	goto	l72
   628  00DC  3A01               	xorlw	1	; case 1
   629  00DD  1903               	skipnz
   630  00DE  28CF               	goto	l737
   631  00DF  3A03               	xorlw	3	; case 2
   632  00E0  1903               	skipnz
   633  00E1  28D1               	goto	l739
   634  00E2  3A01               	xorlw	1	; case 3
   635  00E3  1903               	skipnz
   636  00E4  28D3               	goto	l741
   637  00E5  28E6               	goto	l745
   638  00E6                     l745:	
   639                           
   640                           ;prologue.c: 64: PORTD = result | 0b00010000 | (oldLEDs & 0b11000000);
   641  00E6  0824               	movf	Select4@oldLEDs,w
   642  00E7  39C0               	andlw	192
   643  00E8  0425               	iorwf	Select4@result,w
   644  00E9  3810               	iorlw	16
   645  00EA  0088               	movwf	8	;volatile
   646                           
   647                           ;prologue.c: 65: } while( ReadSw() );
   648  00EB  120A  118A  215D  120A  118A  	fcall	_ReadSw
   649  00F0  3A00               	xorlw	0
   650  00F1  1D03               	skipz
   651  00F2  28BC               	goto	l733
   652                           
   653                           ;prologue.c: 67: PORTD = 0; _delay((unsigned long)((300)*(4000000/4000.0)));
   654  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   655  00F4  1303               	bcf	3,6	;RP1=0, select bank0
   656  00F5  0188               	clrf	8	;volatile
   657  00F6  3002               	movlw	2
   658  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   659  00F8  1303               	bcf	3,6	;RP1=0, select bank0
   660  00F9  00A2               	movwf	??_Select4+2
   661  00FA  3086               	movlw	134
   662  00FB  00A1               	movwf	??_Select4+1
   663  00FC  3098               	movlw	152
   664  00FD  00A0               	movwf	??_Select4
   665  00FE                     u277:	
   666  00FE  0BA0               	decfsz	??_Select4,f
   667  00FF  28FE               	goto	u277
   668  0100  0BA1               	decfsz	??_Select4+1,f
   669  0101  28FE               	goto	u277
   670  0102  0BA2               	decfsz	??_Select4+2,f
   671  0103  28FE               	goto	u277
   672  0104  0000               	nop
   673                           
   674                           ;prologue.c: 68: PORTD = result; _delay((unsigned long)((400)*(4000000/4000.0)));
   675  0105  1283               	bcf	3,5	;RP0=0, select bank0
   676  0106  1303               	bcf	3,6	;RP1=0, select bank0
   677  0107  0825               	movf	Select4@result,w
   678  0108  0088               	movwf	8	;volatile
   679  0109  3003               	movlw	3
   680  010A  1283               	bcf	3,5	;RP0=0, select bank0
   681  010B  1303               	bcf	3,6	;RP1=0, select bank0
   682  010C  00A2               	movwf	??_Select4+2
   683  010D  3008               	movlw	8
   684  010E  00A1               	movwf	??_Select4+1
   685  010F  3076               	movlw	118
   686  0110  00A0               	movwf	??_Select4
   687  0111                     u287:	
   688  0111  0BA0               	decfsz	??_Select4,f
   689  0112  2911               	goto	u287
   690  0113  0BA1               	decfsz	??_Select4+1,f
   691  0114  2911               	goto	u287
   692  0115  0BA2               	decfsz	??_Select4+2,f
   693  0116  2911               	goto	u287
   694  0117  0000               	nop
   695                           
   696                           ;prologue.c: 69: PORTD = 0; _delay((unsigned long)((300)*(4000000/4000.0)));
   697  0118  1283               	bcf	3,5	;RP0=0, select bank0
   698  0119  1303               	bcf	3,6	;RP1=0, select bank0
   699  011A  0188               	clrf	8	;volatile
   700  011B  3002               	movlw	2
   701  011C  1283               	bcf	3,5	;RP0=0, select bank0
   702  011D  1303               	bcf	3,6	;RP1=0, select bank0
   703  011E  00A2               	movwf	??_Select4+2
   704  011F  3086               	movlw	134
   705  0120  00A1               	movwf	??_Select4+1
   706  0121  3098               	movlw	152
   707  0122  00A0               	movwf	??_Select4
   708  0123                     u297:	
   709  0123  0BA0               	decfsz	??_Select4,f
   710  0124  2923               	goto	u297
   711  0125  0BA1               	decfsz	??_Select4+1,f
   712  0126  2923               	goto	u297
   713  0127  0BA2               	decfsz	??_Select4+2,f
   714  0128  2923               	goto	u297
   715  0129  0000               	nop
   716                           
   717                           ;prologue.c: 71: PORTD=oldLEDs;
   718  012A  1283               	bcf	3,5	;RP0=0, select bank0
   719  012B  1303               	bcf	3,6	;RP1=0, select bank0
   720  012C  0824               	movf	Select4@oldLEDs,w
   721  012D  0088               	movwf	8	;volatile
   722                           
   723                           ;prologue.c: 72: return result;
   724  012E  0825               	movf	Select4@result,w
   725  012F  0008               	return
   726  0130                     __end_of_Select4:	
   727                           
   728                           	psect	text2
   729  015D                     __ptext2:	
   730 ;; *************** function _ReadSw *****************
   731 ;; Defined at:
   732 ;;		line 41 in file "prologue.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  tmp             1    7[COMMON] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      unsigned char 
   739 ;; Registers used:
   740 ;;		wreg, status,2
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   746 ;;      Params:         0       0       0       0       0
   747 ;;      Locals:         1       0       0       0       0
   748 ;;      Temps:          2       0       0       0       0
   749 ;;      Totals:         3       0       0       0       0
   750 ;;Total ram usage:        3 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    1
   753 ;; This function calls:
   754 ;;		Nothing
   755 ;; This function is called by:
   756 ;;		_Select4
   757 ;;		_SelectB
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           
   762                           ;psect for function _ReadSw
   763  015D                     _ReadSw:	
   764  015D                     l65:	
   765                           ;incstack = 0
   766                           ; Regs used in _ReadSw: [wreg+status,2]
   767                           ;prologue.c: 42: unsigned char tmp;
   768                           ;prologue.c: 43: do {
   769                           
   770                           
   771                           ;prologue.c: 44: tmp = PORTB & 0b00000001;
   772  015D  1283               	bcf	3,5	;RP0=0, select bank0
   773  015E  1303               	bcf	3,6	;RP1=0, select bank0
   774  015F  0806               	movf	6,w	;volatile
   775  0160  3901               	andlw	1
   776  0161  00F5               	movwf	??_ReadSw
   777  0162  0875               	movf	??_ReadSw,w
   778  0163  00F7               	movwf	ReadSw@tmp
   779                           
   780                           ;prologue.c: 45: _delay((unsigned long)((20)*(4000000/4000.0)));
   781  0164  301A               	movlw	26
   782  0165  00F6               	movwf	??_ReadSw+1
   783  0166  30F8               	movlw	248
   784  0167  00F5               	movwf	??_ReadSw
   785  0168                     u307:	
   786  0168  0BF5               	decfsz	??_ReadSw,f
   787  0169  2968               	goto	u307
   788  016A  0BF6               	decfsz	??_ReadSw+1,f
   789  016B  2968               	goto	u307
   790  016C  0000               	nop
   791                           
   792                           ;prologue.c: 46: } while( tmp != (PORTB & 0b00000001) );
   793  016D  1283               	bcf	3,5	;RP0=0, select bank0
   794  016E  1303               	bcf	3,6	;RP1=0, select bank0
   795  016F  0806               	movf	6,w	;volatile
   796  0170  3901               	andlw	1
   797  0171  0677               	xorwf	ReadSw@tmp,w
   798  0172  1D03               	skipz
   799  0173  295D               	goto	l65
   800                           
   801                           ;prologue.c: 47: return tmp;
   802  0174  0877               	movf	ReadSw@tmp,w
   803  0175  0008               	return
   804  0176                     __end_of_ReadSw:	
   805                           
   806                           	psect	text3
   807  0186                     __ptext3:	
   808 ;; *************** function _ReadADC *****************
   809 ;; Defined at:
   810 ;;		line 34 in file "prologue.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      unsigned char 
   817 ;; Registers used:
   818 ;;		wreg
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   824 ;;      Params:         0       0       0       0       0
   825 ;;      Locals:         0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0
   827 ;;      Totals:         0       0       0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    1
   831 ;; This function calls:
   832 ;;		Nothing
   833 ;; This function is called by:
   834 ;;		_Select4
   835 ;;		_main
   836 ;;		_SelectB
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           
   841                           ;psect for function _ReadADC
   842  0186                     _ReadADC:	
   843                           
   844                           ;prologue.c: 35: ADCON0 |= 0b00000010;
   845                           
   846                           ;incstack = 0
   847                           ; Regs used in _ReadADC: [wreg]
   848  0186  1283               	bcf	3,5	;RP0=0, select bank0
   849  0187  1303               	bcf	3,6	;RP1=0, select bank0
   850  0188  149F               	bsf	31,1	;volatile
   851  0189                     l59:	
   852                           ;prologue.c: 36: while ( (ADCON0 & 0b00000010) );
   853                           
   854  0189  189F               	btfsc	31,1	;volatile
   855  018A  2989               	goto	l59
   856                           
   857                           ;prologue.c: 37: return ADRESH;
   858  018B  081E               	movf	30,w	;volatile
   859  018C  0008               	return
   860  018D                     __end_of_ReadADC:	
   861                           
   862                           	psect	text4
   863  0176                     __ptext4:	
   864 ;; *************** function _Inter_Init *****************
   865 ;; Defined at:
   866 ;;		line 61 in file "main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0
   883 ;;      Totals:         0       0       0       0       0
   884 ;;Total ram usage:        0 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    1
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           
   895                           ;psect for function _Inter_Init
   896  0176                     _Inter_Init:	
   897                           
   898                           ;main.c: 62: INTCON = 0b11010000;
   899                           
   900                           ;incstack = 0
   901                           ; Regs used in _Inter_Init: [wreg]
   902  0176  30D0               	movlw	208
   903  0177  008B               	movwf	11	;volatile
   904                           
   905                           ;main.c: 63: OPTION_REGbits.INTEDG = 1;
   906  0178  1683               	bsf	3,5	;RP0=1, select bank1
   907  0179  1303               	bcf	3,6	;RP1=0, select bank1
   908  017A  1701               	bsf	1,6	;volatile
   909                           
   910                           ;main.c: 64: PIE1 = 0b01000001;
   911  017B  3041               	movlw	65
   912  017C  008C               	movwf	12	;volatile
   913                           
   914                           ;main.c: 65: TMR1H = 0b11110100;
   915  017D  30F4               	movlw	244
   916  017E  1283               	bcf	3,5	;RP0=0, select bank0
   917  017F  1303               	bcf	3,6	;RP1=0, select bank0
   918  0180  008F               	movwf	15	;volatile
   919                           
   920                           ;main.c: 66: TMR1L = 0b00100100;
   921  0181  3024               	movlw	36
   922  0182  008E               	movwf	14	;volatile
   923                           
   924                           ;main.c: 67: T1CON = 0b00110001;
   925  0183  3031               	movlw	49
   926  0184  0090               	movwf	16	;volatile
   927  0185  0008               	return
   928  0186                     __end_of_Inter_Init:	
   929                           
   930                           	psect	text5
   931  0130                     __ptext5:	
   932 ;; *************** function _ISR *****************
   933 ;; Defined at:
   934 ;;		line 7 in file "main.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0
   950 ;;      Temps:          5       0       0       0       0
   951 ;;      Totals:         5       0       0       0       0
   952 ;;Total ram usage:        5 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		Interrupt level 1
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           
   962                           ;psect for function _ISR
   963  0130                     _ISR:	
   964                           
   965                           ;main.c: 8: if((!GO)&ADIF){
   966  0130  1F0C               	btfss	12,6	;volatile
   967  0131  2934               	goto	u17_20
   968  0132  3001               	movlw	1
   969  0133  2935               	goto	u17_22
   970  0134                     u17_20:	
   971  0134  3000               	movlw	0
   972  0135                     u17_22:	
   973  0135  00F0               	movwf	??_ISR
   974  0136  189F               	btfsc	31,1	;volatile
   975  0137  293A               	goto	u18_20
   976  0138  3001               	movlw	1
   977  0139  293B               	goto	u18_22
   978  013A                     u18_20:	
   979  013A  3000               	movlw	0
   980  013B                     u18_22:	
   981  013B  0570               	andwf	??_ISR,w
   982  013C  3800               	iorlw	0
   983  013D  1903               	skipnz
   984  013E  2944               	goto	i1l793
   985                           
   986                           ;main.c: 9: ADIF = 0;
   987  013F  130C               	bcf	12,6	;volatile
   988                           
   989                           ;main.c: 10: Counter[0] ++ ;
   990  0140  3001               	movlw	1
   991  0141  00F0               	movwf	??_ISR
   992  0142  0870               	movf	??_ISR,w
   993  0143  07AC               	addwf	_Counter,f
   994  0144                     i1l793:	
   995                           
   996                           ;main.c: 12: }
   997                           ;main.c: 14: if(TMR1IF){
   998  0144  1C0C               	btfss	12,0	;volatile
   999  0145  294B               	goto	i1l799
  1000                           
  1001                           ;main.c: 15: TMR1IF =0;
  1002  0146  100C               	bcf	12,0	;volatile
  1003                           
  1004                           ;main.c: 16: Counter[1] ++;
  1005  0147  3001               	movlw	1
  1006  0148  00F0               	movwf	??_ISR
  1007  0149  0870               	movf	??_ISR,w
  1008  014A  07AD               	addwf	_Counter+1,f
  1009  014B                     i1l799:	
  1010                           
  1011                           ;main.c: 17: }
  1012                           ;main.c: 18: if(INTF){
  1013  014B  1C8B               	btfss	11,1	;volatile
  1014  014C  2952               	goto	i1l93
  1015                           
  1016                           ;main.c: 19: INTF = 0 ;
  1017  014D  108B               	bcf	11,1	;volatile
  1018                           
  1019                           ;main.c: 20: Counter[2] ++;
  1020  014E  3001               	movlw	1
  1021  014F  00F0               	movwf	??_ISR
  1022  0150  0870               	movf	??_ISR,w
  1023  0151  07AE               	addwf	_Counter+2,f
  1024  0152                     i1l93:	
  1025  0152  0874               	movf	??_ISR+4,w
  1026  0153  00FF               	movwf	127
  1027  0154  0873               	movf	??_ISR+3,w
  1028  0155  008A               	movwf	10
  1029  0156  0872               	movf	??_ISR+2,w
  1030  0157  0084               	movwf	4
  1031  0158  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1032  0159  0083               	movwf	3
  1033  015A  0EFE               	swapf	126,f
  1034  015B  0E7E               	swapf	126,w
  1035  015C  0009               	retfie
  1036  015D                     __end_of_ISR:	
  1037  007E                     btemp	set	126	;btemp
  1038  007E                     wtemp0	set	126
  1039                           
  1040                           	psect	intentry
  1041  0004                     __pintentry:	
  1042                           ;incstack = 0
  1043                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1044                           
  1045  0004                     interrupt_function:	
  1046  007E                     saved_w	set	btemp
  1047  0004  00FE               	movwf	btemp
  1048  0005  0E03               	swapf	3,w
  1049  0006  00F1               	movwf	??_ISR+1
  1050  0007  0804               	movf	4,w
  1051  0008  00F2               	movwf	??_ISR+2
  1052  0009  080A               	movf	10,w
  1053  000A  00F3               	movwf	??_ISR+3
  1054  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1055  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1056  000D  087F               	movf	btemp+1,w
  1057  000E  00F4               	movwf	??_ISR+4
  1058  000F  120A  118A  2930   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     12      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _Select4->_ReadSw

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Select4

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     257
                                              6 BANK0      6     6      0
                         _Inter_Init
                            _ReadADC
                            _Select4
 ---------------------------------------------------------------------------------
 (1) _Select4                                              6     6      0     184
                                              0 BANK0      6     6      0
                            _ReadADC
                             _ReadSw
 ---------------------------------------------------------------------------------
 (2) _ReadSw                                               3     3      0      45
                                              5 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Inter_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Inter_Init
   _ReadADC
   _Select4
     _ReadADC
     _ReadSw

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      17       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      17      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov 17 05:48:50 2017

                      l72 00CC                        l65 015D                        l59 0189  
                      _GO 00F9                       l105 006C                       l741 00D3  
                     l733 00BC                       l743 00D8                       l737 00CF  
                     l745 00E6                       l739 00D1                       l843 0068  
                     l851 0078                       l835 009E                       l845 0071  
                     l829 008A                       l847 0071                       l839 00A9  
                     u307 0168                       u257 0045                       u267 0057  
                     _ISR 0130                       u277 00FE                       u287 0111  
                     u297 0123                       fsr0 0004                       indf 0000  
            __CFG_LVP$OFF 0000                      ?_ISR 0070                      _ADIF 0066  
           __CFG_DEBUG$ON 0000                      _PIE1 008C                      _INTF 0059  
                    i1l93 0152                      _main 001E                      btemp 007E  
                    start 0012             __CFG_IESO$OFF 0000             Select4@result 0025  
         __end_of_ReadADC 018D                     ??_ISR 0070           __end_of_Select4 0130  
                   ?_main 0070             __CFG_WDTE$OFF 0000                     _ANSEL 0188  
                   _T1CON 0010                     i1l793 0144                     i1l799 014B  
                   u17_20 0134                     u17_22 0135                     _TMR1H 000F  
                   _TMR1L 000E                     u18_20 013A                     u18_22 013B  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _PORTD 0008                     _PORTE 0009                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089             __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000  
                   main@i 002A            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E            Select4@oldLEDs 0024  
              Select4@tmp 0023           __initialization 0015              __end_of_main 00B4  
                  ??_main 0026                _Inter_Init 0176                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ANSELH 0189  
                  _INTCON 000B                    _TMR1IF 0060                 ??_ReadADC 0075  
                  _ReadSw 015D                 ??_Select4 0020                    saved_w 007E  
 __end_of__initialization 001A            __pcstackCOMMON 0070               ?_Inter_Init 0070  
          _OPTION_REGbits 0081                __pbssBANK0 002C                   ?_ReadSw 0070  
              __pmaintext 001E                __pintentry 0004                   _ReadADC 0186  
                 _Counter 002C       __size_of_Inter_Init 0010                   _Select4 00B4  
         __size_of_ReadSw 0019                   __ptext1 00B4                   __ptext2 015D  
                 __ptext3 0186                   __ptext4 0176                   __ptext5 0130  
            __size_of_ISR 002D      end_of_initialization 001A                 ReadSw@tmp 0077  
          __end_of_ReadSw 0176              ??_Inter_Init 0075       start_initialization 0015  
             __end_of_ISR 015D  __CFG_FOSC$INTRC_NOCLKOUT 0000        __end_of_Inter_Init 0186  
                ??_ReadSw 0075                 ___latbits 0002             __pcstackBANK0 0020  
                ?_ReadADC 0070                  ?_Select4 0070         interrupt_function 0004  
        __size_of_ReadADC 0007          __size_of_Select4 007C         __CFG_BOR4V$BOR21V 0000  
           __size_of_main 0096                  main@temp 0029                  intlevel1 0000  
              _OPTION_REG 0081  
